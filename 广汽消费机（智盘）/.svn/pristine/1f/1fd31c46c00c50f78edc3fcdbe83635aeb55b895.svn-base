<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\OBJ\USART.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\OBJ\USART.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Thu Apr 11 21:31:56 2019
<BR><P>
<H3>Maximum Stack Usage =        556 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; AnalyzeWorkStatus &rArr; LCD_Disp_Function &rArr; DrawRect &rArr; SPI_Send
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[316]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[66]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[66]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[66]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[83]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4e]">BusFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[69]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6a]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5f]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[60]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[61]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[62]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[63]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[64]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[65]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8c]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8d]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8e]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8f]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[51]">DebugMon_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5a]">EXTI0_IRQHandler</a> from wg1.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7c]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5b]">EXTI1_IRQHandler</a> from wg1.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5c]">EXTI2_IRQHandler</a> from wg2.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5d]">EXTI3_IRQHandler</a> from wg2.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5e]">EXTI4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6b]">EXTI9_5_IRQHandler</a> from w5500.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[58]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[84]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4c]">HardFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[74]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[73]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[76]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[75]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4d]">MemManage_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4b]">NMI_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[55]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[52]">PendSV_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[59]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7d]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[57]">RTC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4a]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[85]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[77]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[78]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[87]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[50]">SVC_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[53]">SysTick_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[90]">SystemInit</a> from system_stm32f10x.o(.text) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[56]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6c]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6f]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6e]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6d]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[70]">TIM2_IRQHandler</a> from w5500_config.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[71]">TIM3_IRQHandler</a> from timer.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[72]">TIM4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[86]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8a]">TIM6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8b]">TIM7_IRQHandler</a> from timer.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7f]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[82]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[81]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[80]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[88]">UART4_IRQHandler</a> from usart.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[89]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[79]">USART1_IRQHandler</a> from usart.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7a]">USART2_IRQHandler</a> from usart.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7b]">USART3_IRQHandler</a> from usart.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7e]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[67]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[68]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4f]">UsageFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[54]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[93]">__main</a> from __main.o(!!!main) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[92]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[3]">fun0</a> from menu.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[4]">fun1</a> from menu.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[d]">fun10</a> from menu.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[e]">fun11</a> from menu.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[f]">fun12</a> from menu.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[10]">fun13</a> from menu.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[11]">fun14</a> from menu.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[12]">fun15</a> from menu.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[13]">fun16</a> from menu.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[14]">fun17</a> from menu.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[15]">fun18</a> from menu.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[16]">fun19</a> from menu.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[5]">fun2</a> from menu.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[17]">fun20</a> from menu.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[18]">fun21</a> from menu.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[19]">fun22</a> from menu.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[1a]">fun23</a> from menu.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[1b]">fun24</a> from menu.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[1c]">fun25</a> from menu.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[1d]">fun26</a> from menu.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[1e]">fun27</a> from menu.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[1f]">fun28</a> from menu.o(.text) referenced 10 times from menu.o(.data)
 <LI><a href="#[20]">fun29</a> from menu.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[6]">fun3</a> from menu.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[21]">fun30</a> from menu.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[36]">fun31</a> from menu.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[37]">fun32</a> from menu.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[38]">fun33</a> from menu.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[39]">fun34</a> from menu.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[3a]">fun35</a> from menu.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[22]">fun36</a> from menu.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[23]">fun37</a> from menu.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[24]">fun38</a> from menu.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[25]">fun39</a> from menu.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[7]">fun4</a> from menu.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[26]">fun40</a> from menu.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[27]">fun41</a> from menu.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[28]">fun42</a> from menu.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[29]">fun43</a> from menu.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[2a]">fun44</a> from menu.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[2b]">fun45</a> from menu.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[2c]">fun46</a> from menu.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[2d]">fun47</a> from menu.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[2e]">fun48</a> from menu.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[2f]">fun49</a> from menu.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[8]">fun5</a> from menu.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[30]">fun50</a> from menu.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[31]">fun51</a> from menu.o(.text) referenced 8 times from menu.o(.data)
 <LI><a href="#[32]">fun52</a> from menu.o(.text) referenced 8 times from menu.o(.data)
 <LI><a href="#[33]">fun53</a> from menu.o(.text) referenced 8 times from menu.o(.data)
 <LI><a href="#[34]">fun54</a> from menu.o(.text) referenced 8 times from menu.o(.data)
 <LI><a href="#[35]">fun55</a> from menu.o(.text) referenced 8 times from menu.o(.data)
 <LI><a href="#[3b]">fun56</a> from menu.o(.text) referenced 8 times from menu.o(.data)
 <LI><a href="#[3c]">fun57</a> from menu.o(.text) referenced 8 times from menu.o(.data)
 <LI><a href="#[3d]">fun58</a> from menu.o(.text) referenced 8 times from menu.o(.data)
 <LI><a href="#[3e]">fun59</a> from menu.o(.text) referenced 8 times from menu.o(.data)
 <LI><a href="#[9]">fun6</a> from menu.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[3f]">fun60</a> from menu.o(.text) referenced 8 times from menu.o(.data)
 <LI><a href="#[a]">fun7</a> from menu.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[b]">fun8</a> from menu.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[40]">fun81</a> from menu.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[41]">fun82</a> from menu.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[42]">fun83</a> from menu.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[43]">fun84</a> from menu.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[44]">fun85</a> from menu.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[45]">fun86</a> from menu.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[46]">fun87</a> from menu.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[47]">fun88</a> from menu.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[48]">fun89</a> from menu.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[c]">fun9</a> from menu.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[49]">fun90</a> from menu.o(.text) referenced 2 times from menu.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[93]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[94]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[96]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[319]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[31a]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[31b]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[31c]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[31d]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[9d]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[31e]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[31f]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[97]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[320]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[321]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[322]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[323]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[99]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[324]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[325]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[326]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[327]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[328]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[329]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[32a]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[32b]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[32c]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[32d]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[32e]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[32f]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[330]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[331]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[332]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[a2]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[333]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[334]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[335]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[336]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[337]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[338]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[339]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[95]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[33a]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[9a]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[9c]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[33b]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[9e]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 556 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; AnalyzeWorkStatus &rArr; LCD_Disp_Function &rArr; DrawRect &rArr; SPI_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[33c]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[317]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[a1]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[33d]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[a3]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[310]"></a>MSR_MSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys.o(.emb_text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_load_app
</UL>

<P><STRONG><a name="[a5]"></a>InitSystemHardware</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = InitSystemHardware &rArr; W5500_SYSTEM_Init &rArr; Load_Net_Parameters &rArr; InitLocalIPGateway &rArr; AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_SYSTEM_Init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeDelay
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM16_INIT
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_Int_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Int_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBG_Color
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSREST_KEY_Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPEAK_USART_TX_init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RELAY_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_Init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Config
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIX_Init_WG2
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIX_Init_WG1
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EC20_REST_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawIcon
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1302_Init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrScreen
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_2_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c5]"></a>Hardware_SelfTest</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Hardware_SelfTest &rArr; AT24C256Check &rArr; AT24CXX_Check &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24C256Check
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c7]"></a>InitSystemParameter</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = InitSystemParameter &rArr; Init_EC20_Remote_IP &rArr; LoadnEC20DefaultValue &rArr; AT24CXX_Write &rArr; IIC_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initnewdate_addr
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_UpdataRecord
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Heartbeat
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_EC20_Remote_IP
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVolume
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTime_Interval_Detection
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTcpClient
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSysvar
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSub_Maximum_Limit
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRecordcount_Err
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRecord
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPassword
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPassage_TimeEnable
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPassage_Time
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitOutput
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitOperation_CommCount
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitName
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMachno
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHoliday_Vacations
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFixed_consumption_Timer
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFixed_consumption_Money
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitErr_CardCount
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitEC20Combuff
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitConsumption_All_Money
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCombuff
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCarte_consum_Money
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitActual_CardCount
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9f]"></a>main</STRONG> (Thumb, 220 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = main &rArr; AnalyzeWorkStatus &rArr; LCD_Disp_Function &rArr; DrawRect &rArr; SPI_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun5
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_Rest
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_Network_Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Wisdom_plate
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessReal_time_upload
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRS485
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process4G_Commu
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_key_set
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heartbeat_Send
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndOutput2
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndOutput1
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_IAP_OK_System_Boot
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckInit
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyzeWorkStatus
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystemParameter
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_SelfTest
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystemHardware
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[4b]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[33e]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, system_stm32f10x.o(.text), UNUSED)

<P><STRONG><a name="[ae]"></a>LED_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LED_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystemHardware
</UL>

<P><STRONG><a name="[af]"></a>BEEP_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, beep.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BEEP_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystemHardware
</UL>

<P><STRONG><a name="[ac]"></a>TIM3_Int_Init</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIM3_Int_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystemHardware
</UL>

<P><STRONG><a name="[ad]"></a>TIM7_Int_Init</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIM7_Int_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystemHardware
</UL>

<P><STRONG><a name="[fe]"></a>TIM2_NVIC_Configuration</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>

<P><STRONG><a name="[71]"></a>TIM3_IRQHandler</STRONG> (Thumb, 244 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM3_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>TIM7_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM7_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d3]"></a>timedelay_s</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outmenu
</UL>

<P><STRONG><a name="[101]"></a>IIC_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, myiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IIC_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Init
</UL>

<P><STRONG><a name="[102]"></a>IIC_Start</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, myiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IIC_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[104]"></a>IIC_Stop</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, myiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
</UL>

<P><STRONG><a name="[105]"></a>IIC_Wait_Ack</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, myiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IIC_Wait_Ack &rArr; IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[106]"></a>IIC_Ack</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, myiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IIC_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[107]"></a>IIC_NAck</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, myiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[108]"></a>IIC_Send_Byte</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, myiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IIC_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[109]"></a>IIC_Read_Byte</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, myiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[b0]"></a>RELAY_Init</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, relay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RELAY_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystemHardware
</UL>

<P><STRONG><a name="[10a]"></a>SPI_FLASH_Write_SR</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, w25qxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_FLASH_Write_SR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Init
</UL>

<P><STRONG><a name="[b5]"></a>SPI_Flash_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, w25qxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_Flash_Init &rArr; SPI1_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_SetSpeed
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Write_SR
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystemHardware
</UL>

<P><STRONG><a name="[10e]"></a>SPI_Flash_ReadSR</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, w25qxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_Flash_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Wait_Busy
</UL>

<P><STRONG><a name="[10f]"></a>SPI_FLASH_Write_Enable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, w25qxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_FLASH_Write_Enable &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Erase_Sector_1
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Erase_Chip
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Erase_Sector
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Write_Page
</UL>

<P><STRONG><a name="[110]"></a>SPI_FLASH_Write_Disable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, w25qxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>

<P><STRONG><a name="[111]"></a>SPI_Flash_ReadID</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, w25qxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>

<P><STRONG><a name="[112]"></a>SPI_Flash_Read</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, w25qxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_Flash_Read &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Write
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRecord
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRecord_Address
</UL>

<P><STRONG><a name="[113]"></a>W25X_Read_Page</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, w25qxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = W25X_Read_Page &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_MaxRecord
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUpdata_MaxRecord
</UL>

<P><STRONG><a name="[114]"></a>SPI_Flash_Wait_Busy</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, w25qxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_Flash_Wait_Busy &rArr; SPI_Flash_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_ReadSR
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Erase_Sector_1
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Erase_Chip
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Erase_Sector
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Write_Page
</UL>

<P><STRONG><a name="[115]"></a>SPI_Flash_Write_Page</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, w25qxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI_Flash_Write_Page &rArr; SPI_Flash_Wait_Busy &rArr; SPI_Flash_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Wait_Busy
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Write_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Write_NoCheck
</UL>

<P><STRONG><a name="[116]"></a>SPI_Flash_Write_NoCheck</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, w25qxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SPI_Flash_Write_NoCheck &rArr; SPI_Flash_Write_Page &rArr; SPI_Flash_Wait_Busy &rArr; SPI_Flash_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Write_Page
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Write
</UL>

<P><STRONG><a name="[117]"></a>SPI_Flash_Erase_Sector</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, w25qxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_Flash_Erase_Sector &rArr; SPI_Flash_Wait_Busy &rArr; SPI_Flash_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Wait_Busy
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Write_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Write
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelRecord
</UL>

<P><STRONG><a name="[118]"></a>SPI_Flash_Write</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, w25qxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SPI_Flash_Write &rArr; SPI_Flash_Write_NoCheck &rArr; SPI_Flash_Write_Page &rArr; SPI_Flash_Wait_Busy &rArr; SPI_Flash_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Erase_Sector
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Write_NoCheck
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_UpdataRecord
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRecord
</UL>

<P><STRONG><a name="[119]"></a>SPI_Flash_Erase_Chip</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, w25qxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Wait_Busy
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Write_Enable
</UL>

<P><STRONG><a name="[11a]"></a>SPI_Flash_Erase_Sector_1</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, w25qxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Wait_Busy
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Write_Enable
</UL>

<P><STRONG><a name="[11b]"></a>SPI_Flash_PowerDown</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, w25qxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>

<P><STRONG><a name="[11c]"></a>SPI_Flash_WAKEUP</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, w25qxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>

<P><STRONG><a name="[10b]"></a>SPI1_ReadWriteByte</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_WAKEUP
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_PowerDown
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Erase_Sector_1
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Erase_Chip
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Erase_Sector
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Write_Page
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25X_Read_Page
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Read
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_ReadID
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Write_Disable
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Write_Enable
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_ReadSR
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Write_SR
</UL>

<P><STRONG><a name="[10c]"></a>SPI1_Init</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI1_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Init
</UL>

<P><STRONG><a name="[10d]"></a>SPI1_SetSpeed</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI1_SetSpeed &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Init
</UL>

<P><STRONG><a name="[e3]"></a>IWDG_Init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, wdg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IWDG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_WriteAccessCmd
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetReload
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetPrescaler
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e7]"></a>IWDG_Feed</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, wdg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IWDG_Feed
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_IAP_Read_Data
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_MaxRecord
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRecord_Address
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBackGroupName
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWhiteGroupName
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUpdata_MaxRecord
</UL>

<P><STRONG><a name="[ba]"></a>SYSREST_KEY_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, sysrest.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SYSREST_KEY_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystemHardware
</UL>

<P><STRONG><a name="[b2]"></a>AT24CXX_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, 24cxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AT24CXX_Init &rArr; IIC_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystemHardware
</UL>

<P><STRONG><a name="[127]"></a>AT24CXX_ReadOneByte</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, 24cxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Check
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadLenByte
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initnewdate_addr
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPassword
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBackGroupName
</UL>

<P><STRONG><a name="[128]"></a>AT24CXX_WriteOneByte</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, 24cxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AT24CXX_WriteOneByte &rArr; IIC_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write1
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Check
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteLenByte
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPassword
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBackName
</UL>

<P><STRONG><a name="[129]"></a>AT24CXX_Write</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, 24cxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AT24CXX_Write &rArr; IIC_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initnewdate_addr
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_DelAllCardno
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_DelCardno
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_CommFindCardno
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_AddCardno
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveConsumption_All_Money
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_UpdataRecordCount
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelRecord
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveErr_CardCount
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveActual_CardCount
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveRecordCount
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPassword
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveSub_Maximum_Limit
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveRecordcount_Err
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveOperation_CommCount
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveMachno
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveMachine_Category
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadnNetDefaultValue
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadnEC20DefaultValue
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteConsumption_All_Money
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_SaveGroupCount
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_SaveCommCount
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Holiday_Vacations
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Passage_Time
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Passage_Time_Enable
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Permission_Period
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Check_Sector_Password_Mode
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_ReadorWriteICData_Mode
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Interval_delay
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearRecord
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBackGroupName
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataRecordTEST
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_TCP4G_Remote_IP
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_TCP_Remote_IP
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_TCP_Local_IP
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_This_MAC
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_TCP_Mode
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_list_enabled
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Output_delay
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Clock_delay
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveExtvar
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveSysvar
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun14
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun9
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveCarte_consum_Money
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFixed_consumption_Timer
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFixed_consumption_Money
</UL>

<P><STRONG><a name="[12a]"></a>AT24CXX_WriteLenByte</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, 24cxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
</UL>

<P><STRONG><a name="[12b]"></a>AT24CXX_ReadLenByte</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, 24cxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[12c]"></a>AT24CXX_Check</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, 24cxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AT24CXX_Check &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24C256Check
</UL>

<P><STRONG><a name="[12d]"></a>AT24CXX_Read</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, 24cxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_UpdataRecord
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_EC20_Remote_IP
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVolume
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTime_Interval_Detection
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSysvar
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSub_Maximum_Limit
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRecordcount_Err
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRecord
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPassage_TimeEnable
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPassage_Time
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitOperation_CommCount
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMachno
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHoliday_Vacations
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFixed_consumption_Timer
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFixed_consumption_Money
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitErr_CardCount
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitConsumption_All_Money
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCarte_consum_Money
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitActual_CardCount
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_DelCardno
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_CommFindCardno
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_FindCardno
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommFindCardno
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_GetGroupCount
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_GetCommCount
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_GQ
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Extvar
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Interval_delay
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBackGroupName
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBackWhiteNamesize
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_This_MAC
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_sysvar
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_list_enabled
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Output_delay
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Clock_delay
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSectionAndPassword
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_MAC_Address
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLocalIPGateway
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRemoteIPandPORT
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun84
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun19
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun14
</UL>

<P><STRONG><a name="[12e]"></a>AT24CXX_Write1</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, 24cxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AT24CXX_Write1 &rArr; AT24CXX_WriteOneByte &rArr; IIC_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_Volume
</UL>

<P><STRONG><a name="[c6]"></a>AT24C256Check</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, 24cxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AT24C256Check &rArr; AT24CXX_Check &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Check
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_SelfTest
</UL>

<P><STRONG><a name="[b6]"></a>RS485_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rs485.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RS485_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystemHardware
</UL>

<P><STRONG><a name="[12f]"></a>RS485_Send_Data</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, rs485.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RS485_Send_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReyurnCommand_Send
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ChipInfo
</UL>

<P><STRONG><a name="[132]"></a>RS485_Send_One_Data</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rs485.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>

<P><STRONG><a name="[b7]"></a>EXTIX_Init_WG1</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, wg1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTIX_Init_WG1 &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystemHardware
</UL>

<P><STRONG><a name="[5a]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, wg1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, wg1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[138]"></a>InitWG1</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, wg1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessWG1
</UL>

<P><STRONG><a name="[13a]"></a>GetWG1Cardno</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, wg1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetWG1Cardno
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessWG1
</UL>

<P><STRONG><a name="[137]"></a>ProcessWG1</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, wg1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ProcessWG1 &rArr; GetWG1Cardno
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWG1Cardno
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitWG1
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckWG1Data
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WP_CheckCard
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckCard
</UL>

<P><STRONG><a name="[b8]"></a>EXTIX_Init_WG2</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, wg2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTIX_Init_WG2 &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystemHardware
</UL>

<P><STRONG><a name="[5c]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, wg2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, wg2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13c]"></a>InitWG2</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, wg2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessWG2
</UL>

<P><STRONG><a name="[13e]"></a>GetWG2Cardno</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, wg2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetWG2Cardno
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessWG2
</UL>

<P><STRONG><a name="[13b]"></a>ProcessWG2</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, wg2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ProcessWG2 &rArr; GetWG2Cardno
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitWG2
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckWG2Data
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWG2Cardno
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WP_CheckCard
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckCard
</UL>

<P><STRONG><a name="[b3]"></a>AT24CXX_2_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, 24cxx_2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AT24CXX_2_Init &rArr; IIC_2_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_2_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystemHardware
</UL>

<P><STRONG><a name="[140]"></a>AT24CXX_2_ReadOneByte</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, 24cxx_2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AT24CXX_2_ReadOneByte &rArr; IIC_2_Read_Byte &rArr; IIC_2_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_2_Wait_Ack
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_2_Stop
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_2_Start
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_2_Send_Byte
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_2_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_2_Read
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_2_Check
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_2_ReadLenByte
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWhiteGroupName
</UL>

<P><STRONG><a name="[146]"></a>AT24CXX_2_WriteOneByte</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, 24cxx_2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AT24CXX_2_WriteOneByte &rArr; IIC_2_Wait_Ack &rArr; IIC_2_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_2_Wait_Ack
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_2_Stop
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_2_Start
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_2_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_2_Write1
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_2_Check
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_2_WriteLenByte
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearWhiteName
</UL>

<P><STRONG><a name="[147]"></a>AT24CXX_2_Write</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, 24cxx_2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AT24CXX_2_Write &rArr; IIC_2_Wait_Ack &rArr; IIC_2_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_2_Wait_Ack
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_2_Stop
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_2_Start
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_2_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAllCardno
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveGroupCount
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveCommCount
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWhiteGroupName
</UL>

<P><STRONG><a name="[148]"></a>AT24CXX_2_WriteLenByte</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, 24cxx_2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_2_WriteOneByte
</UL>

<P><STRONG><a name="[149]"></a>AT24CXX_2_ReadLenByte</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, 24cxx_2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_2_ReadOneByte
</UL>

<P><STRONG><a name="[14a]"></a>AT24CXX_2_Check</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, 24cxx_2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_2_WriteOneByte
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_2_ReadOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24C256Check_2
</UL>

<P><STRONG><a name="[14b]"></a>AT24CXX_2_Read</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, 24cxx_2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AT24CXX_2_Read &rArr; AT24CXX_2_ReadOneByte &rArr; IIC_2_Read_Byte &rArr; IIC_2_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_2_ReadOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindCardno
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelCardno
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGroupCount
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCommCount
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWhiteGroupName
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBackWhiteNamesize
</UL>

<P><STRONG><a name="[14c]"></a>AT24CXX_2_Write1</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, 24cxx_2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AT24CXX_2_Write1 &rArr; AT24CXX_2_WriteOneByte &rArr; IIC_2_Wait_Ack &rArr; IIC_2_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_2_WriteOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelCardno
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommFindCardno
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCardno
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWhiteGroupName
</UL>

<P><STRONG><a name="[14d]"></a>AT24C256Check_2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, 24cxx_2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_2_Check
</UL>

<P><STRONG><a name="[13f]"></a>IIC_2_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, myiic_2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IIC_2_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_2_Init
</UL>

<P><STRONG><a name="[141]"></a>IIC_2_Start</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, myiic_2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IIC_2_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_2_Write
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_2_WriteOneByte
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_2_ReadOneByte
</UL>

<P><STRONG><a name="[145]"></a>IIC_2_Stop</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, myiic_2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IIC_2_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_2_Wait_Ack
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_2_Write
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_2_WriteOneByte
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_2_ReadOneByte
</UL>

<P><STRONG><a name="[143]"></a>IIC_2_Wait_Ack</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, myiic_2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IIC_2_Wait_Ack &rArr; IIC_2_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_2_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_2_Write
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_2_WriteOneByte
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_2_ReadOneByte
</UL>

<P><STRONG><a name="[14e]"></a>IIC_2_Ack</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, myiic_2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IIC_2_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_2_Read_Byte
</UL>

<P><STRONG><a name="[14f]"></a>IIC_2_NAck</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, myiic_2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IIC_2_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_2_Read_Byte
</UL>

<P><STRONG><a name="[142]"></a>IIC_2_Send_Byte</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, myiic_2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IIC_2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_2_Write
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_2_WriteOneByte
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_2_ReadOneByte
</UL>

<P><STRONG><a name="[144]"></a>IIC_2_Read_Byte</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, myiic_2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IIC_2_Read_Byte &rArr; IIC_2_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_2_NAck
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_2_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_2_ReadOneByte
</UL>

<P><STRONG><a name="[bb]"></a>EC20_REST_Init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ec20.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EC20_REST_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystemHardware
</UL>

<P><STRONG><a name="[150]"></a>EC20_SendString</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ec20.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EC20_SendString
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heartbeat_Send
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Power_Signal
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UPloadRecord
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoUP_GPS_Information
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_Synchronization_Time
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReyurnCommand_Send
</UL>

<P><STRONG><a name="[151]"></a>EC20_SendByte</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ec20.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EC20_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_SendCmd
</UL>

<P><STRONG><a name="[d5]"></a>InitEC20Combuff</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ec20.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = InitEC20Combuff
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_Rest
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process4G_Commu
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystemParameter
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[e5]"></a>QuectelEC20_Rest</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ec20.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = QuectelEC20_Rest &rArr; InitEC20Combuff
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitEC20Combuff
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_Network_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_TCP4G_Remote_IP
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_ResNottore_factory
</UL>

<P><STRONG><a name="[15b]"></a>ExpectReceData_1</STRONG> (Thumb, 178 bytes, Stack size 20 bytes, ec20.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ExpectReceData_1
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_CIMI
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_CGSN
</UL>

<P><STRONG><a name="[154]"></a>QuectelEC20_PowerDown</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ec20.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAckData
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_SendCmd
</UL>

<P><STRONG><a name="[33f]"></a>cleanEC20_bcrebuff</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ec20.o(.text), UNUSED)

<P><STRONG><a name="[156]"></a>QuectelEC20_AT</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ec20.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = QuectelEC20_AT &rArr; QuectelEC20_SendCmd &rArr; EC20_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAckData
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_Network_Init
</UL>

<P><STRONG><a name="[157]"></a>QuectelEC20_ATE0</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, ec20.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = QuectelEC20_ATE0 &rArr; QuectelEC20_SendCmd &rArr; EC20_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAckData
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_Network_Init
</UL>

<P><STRONG><a name="[158]"></a>QuectelEC20_CPIN</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, ec20.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = QuectelEC20_CPIN &rArr; QuectelEC20_SendCmd &rArr; EC20_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAckData
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_Network_Init
</UL>

<P><STRONG><a name="[159]"></a>QuectelEC20_CGSN</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, ec20.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = QuectelEC20_CGSN &rArr; QuectelEC20_SendCmd &rArr; EC20_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpectReceData_1
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_SendCmd
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_Network_Init
</UL>

<P><STRONG><a name="[15d]"></a>QuectelEC20_CIMI</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, ec20.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = QuectelEC20_CIMI &rArr; QuectelEC20_SendCmd &rArr; EC20_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpectReceData_1
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_SendCmd
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_Network_Init
</UL>

<P><STRONG><a name="[15e]"></a>QuectelEC20_CREG</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, ec20.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = QuectelEC20_CREG &rArr; ExpectReceData
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpectReceData
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_Network_Init
</UL>

<P><STRONG><a name="[160]"></a>QuectelEC20_CGREG</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, ec20.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = QuectelEC20_CGREG &rArr; ExpectReceData
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpectReceData
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_Network_Init
</UL>

<P><STRONG><a name="[161]"></a>QuectelEC20_QGPS</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, ec20.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = QuectelEC20_QGPS &rArr; QuectelEC20_SendCmd &rArr; EC20_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAckData
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_Network_Init
</UL>

<P><STRONG><a name="[162]"></a>QuectelEC20_QGPSCFG</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, ec20.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = QuectelEC20_QGPSCFG &rArr; QuectelEC20_SendCmd &rArr; EC20_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAckData
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_Network_Init
</UL>

<P><STRONG><a name="[163]"></a>QuectelEC20_QGPSLOC</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, ec20.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = QuectelEC20_QGPSLOC &rArr; QuectelEC20_SendCmd &rArr; EC20_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAckData
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_SendCmd
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_Network_Init
</UL>

<P><STRONG><a name="[164]"></a>QuectelEC20_QGPSEND</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, ec20.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = QuectelEC20_QGPSEND &rArr; QuectelEC20_SendCmd &rArr; EC20_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAckData
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_Network_Init
</UL>

<P><STRONG><a name="[165]"></a>QuectelEC20_QIOPEN</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, ec20.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = QuectelEC20_QIOPEN &rArr; Send_Power_Signal &rArr; EC20_SendString
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Power_Signal
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAckData
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_Network_Init
</UL>

<P><STRONG><a name="[167]"></a>QuectelEC20_QICLOSE</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, ec20.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = QuectelEC20_QICLOSE &rArr; QuectelEC20_SendCmd &rArr; EC20_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAckData
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_Network_Init
</UL>

<P><STRONG><a name="[ef]"></a>QuectelEC20_Network_Init</STRONG> (Thumb, 382 bytes, Stack size 8 bytes, ec20.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = QuectelEC20_Network_Init &rArr; QuectelEC20_QIOPEN &rArr; Send_Power_Signal &rArr; EC20_SendString
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_Rest
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_QICLOSE
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_QIOPEN
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_QGPSEND
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_QGPSLOC
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_QGPSCFG
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_QGPS
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_CGREG
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_CREG
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_CIMI
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_CGSN
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_CPIN
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_ATE0
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_AT
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[168]"></a>ec20sufatest</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ec20.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_SOCK_Data_Buffer
</UL>

<P><STRONG><a name="[d9]"></a>InitVolume</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, volume.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = InitVolume &rArr; AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystemParameter
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataRecordTEST
</UL>

<P><STRONG><a name="[16a]"></a>SET_Volume</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, volume.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = SET_Volume &rArr; SYN6288_Send &rArr; SPEAKUART_SendString &rArr; MUSART1_SendData &rArr; TX_H
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write1
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDectoBCD
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYN6288_Send
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrCPY
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexToStr
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun19
</UL>

<P><STRONG><a name="[172]"></a>STMFLASH_ReadHalfWord</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stmflash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Read
</UL>

<P><STRONG><a name="[16f]"></a>STMFLASH_Write_NoCheck</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, stmflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = STMFLASH_Write_NoCheck &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
</UL>

<P><STRONG><a name="[171]"></a>STMFLASH_Read</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stmflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = STMFLASH_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_ReadHalfWord
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_IAP_OK_System_Boot
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Erase
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_IAP_Read_Data
</UL>

<P><STRONG><a name="[173]"></a>STMFLASH_Write</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, stmflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = STMFLASH_Write &rArr; STMFLASH_Write_NoCheck &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Read
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write_NoCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Write
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_write_appbin
</UL>

<P><STRONG><a name="[177]"></a>Test_Write</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, stmflash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
</UL>

<P><STRONG><a name="[178]"></a>STMFLASH_Erase</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, stmflash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Read
</UL>

<P><STRONG><a name="[a6]"></a>delay_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_init
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystemHardware
</UL>

<P><STRONG><a name="[103]"></a>delay_us</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_WAKEUP
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_PowerDown
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1302_Read_Byte
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1302_Write_Byte
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RC522_ReadByte
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RC522_SendByte
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReset
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M500PcdConfigISOType
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_2_NAck
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_2_Ack
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_2_Wait_Ack
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_2_Stop
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_2_Start
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_2_Send_Byte
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_2_Read_Byte
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM16_Read_Byte
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM16_Send_Byte
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM16_Send_ACK
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM16_Read_ACK
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM16_IIC_Stop
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM16_IIC_Start
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC50X0_SDA
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MUSART1_SendData
</UL>

<P><STRONG><a name="[c3]"></a>delay_ms</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM16_INIT
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_Init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_Rest
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_key_set
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTime_Interval_Detection
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPassage_TimeEnable
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPassage_Time
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHoliday_Vacations
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckInit
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24C256Check
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystemHardware
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24C256Check_2
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_2_Write
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_2_WriteOneByte
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowPlay_Card
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD12864_ShowPlay_Card
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD12864_ShowKeyValue
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC50X0_SDA
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Open_Door
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_TCP4G_Remote_IP
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_TCP_Remote_IP
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_TCP_Local_IP
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_This_MAC
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_TCP_Mode
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_ResNottore_factory
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Restore_factory
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED2_fun
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED1_fun
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowKeyValue_Plus
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Standby
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Show_Consump_Pattern
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowKeyValue
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun0
</UL>

<P><STRONG><a name="[a4]"></a>_sys_exit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[340]"></a>fputc</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usart.o(.text), UNUSED)

<P><STRONG><a name="[a8]"></a>uart_init</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = uart_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystemHardware
</UL>

<P><STRONG><a name="[a9]"></a>uart2_init</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = uart2_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystemHardware
</UL>

<P><STRONG><a name="[aa]"></a>uart3_init</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = uart3_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystemHardware
</UL>

<P><STRONG><a name="[ab]"></a>uart4_init</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = uart4_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystemHardware
</UL>

<P><STRONG><a name="[79]"></a>USART1_IRQHandler</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitEC20Combuff
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>USART2_IRQHandler</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART2_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCombuff
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>USART3_IRQHandler</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART3_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitQRCombuff
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>UART4_IRQHandler</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART4_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitWPCombuff
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[316]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[a7]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_NVIC_Configuration
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystemHardware
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[fc]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_NVIC_Configuration
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_Int_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Int_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIX_Init_WG2
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIX_Init_WG1
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_NVIC_Configuration
</UL>

<P><STRONG><a name="[341]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[342]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[179]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[181]"></a>GPIO_DeInit</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[183]"></a>GPIO_AFIODeInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[f6]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM16_INIT
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSREST_KEY_Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPEAK_USART_TX_init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RELAY_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Config
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EC20_REST_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1302_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Init
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_SPI_Config
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_2_Init
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM16_SDA_OUT
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM16_SDA_IN
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcds_Config
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Configuration
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_GPIO_Configuration
</UL>

<P><STRONG><a name="[343]"></a>GPIO_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1b1]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RC522_ReadByte
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM16_Read_Byte
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM16_Read_ACK
</UL>

<P><STRONG><a name="[344]"></a>GPIO_ReadInputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[345]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[346]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[f8]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSREST_KEY_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPEAK_USART_TX_init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RELAY_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EC20_REST_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1302_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRawRC
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRawRC
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RC522_ReadByte
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RC522_SendByte
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReset
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_SOCK_Data_Buffer
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_2_Init
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM16_Read_Byte
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM16_Send_Byte
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM16_Send_ACK
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM16_Read_ACK
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM16_IIC_Stop
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM16_IIC_Start
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_H
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Hardware_Reset
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SOCK_Data_Buffer
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500_SOCK_2Byte
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500_SOCK_1Byte
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500_1Byte
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_4Byte
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_2Byte
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_1Byte
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_nByte
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_2Byte
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_1Byte
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Configuration
</UL>

<P><STRONG><a name="[f7]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1302_Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRawRC
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRawRC
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RC522_ReadByte
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RC522_SendByte
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReset
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_SOCK_Data_Buffer
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM16_Read_Byte
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM16_Send_Byte
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM16_Send_ACK
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM16_Read_ACK
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM16_IIC_Stop
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM16_IIC_Start
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_L
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Hardware_Reset
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SOCK_Data_Buffer
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500_SOCK_2Byte
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500_SOCK_1Byte
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500_1Byte
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_4Byte
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_2Byte
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_1Byte
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_nByte
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_2Byte
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_1Byte
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_GPIO_Configuration
</UL>

<P><STRONG><a name="[347]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[348]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[349]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[34a]"></a>GPIO_EventOutputConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[34b]"></a>GPIO_EventOutputCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[34c]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[133]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIX_Init_WG2
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIX_Init_WG1
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_GPIO_Configuration
</UL>

<P><STRONG><a name="[34d]"></a>GPIO_ETH_MediaInterfaceConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[34e]"></a>RCC_DeInit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[34f]"></a>RCC_HSEConfig</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[185]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
</UL>

<P><STRONG><a name="[184]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[350]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[351]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[352]"></a>RCC_PLLConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[353]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[354]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[355]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[356]"></a>RCC_HCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[357]"></a>RCC_PCLK1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[358]"></a>RCC_PCLK2Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[359]"></a>RCC_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[35a]"></a>RCC_USBCLKConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[35b]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[35c]"></a>RCC_LSEConfig</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[35d]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[35e]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[35f]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[188]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[360]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[f5]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM16_INIT
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSREST_KEY_Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPEAK_USART_TX_init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RELAY_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIX_Init_WG2
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIX_Init_WG1
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EC20_REST_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1302_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Init
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_SPI_Config
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_2_Init
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Configuration
</UL>

<P><STRONG><a name="[f9]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_Int_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Int_Init
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Init_Config
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Configuration
</UL>

<P><STRONG><a name="[182]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFIODeInit
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
</UL>

<P><STRONG><a name="[187]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[361]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[362]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[363]"></a>RCC_MCOConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[364]"></a>RCC_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[365]"></a>RCC_GetITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[366]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[186]"></a>USART_DeInit</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[17a]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
</UL>

<P><STRONG><a name="[367]"></a>USART_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[368]"></a>USART_ClockInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[369]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[17c]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
</UL>

<P><STRONG><a name="[17b]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
</UL>

<P><STRONG><a name="[36a]"></a>USART_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[36b]"></a>USART_SetAddress</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[36c]"></a>USART_WakeUpConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[36d]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[36e]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[36f]"></a>USART_LINCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[130]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Send_One_Data
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Send_Data
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EC20_SendByte
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EC20_SendString
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WP_SendByte
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WP_SendString
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_SendByte
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_SendString
</UL>

<P><STRONG><a name="[17e]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[370]"></a>USART_SendBreak</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[371]"></a>USART_SetGuardTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[372]"></a>USART_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[373]"></a>USART_SmartCardCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[374]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[375]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[376]"></a>USART_OverSampling8Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[377]"></a>USART_OneBitMethodCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[378]"></a>USART_IrDAConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[379]"></a>USART_IrDACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[131]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Send_One_Data
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Send_Data
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EC20_SendByte
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EC20_SendString
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WP_SendByte
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WP_SendString
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_SendByte
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_SendString
</UL>

<P><STRONG><a name="[37a]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[17d]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[37b]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[189]"></a>TIM_DeInit</STRONG> (Thumb, 424 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[fa]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_Int_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Int_Init
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Init_Config
</UL>

<P><STRONG><a name="[37c]"></a>TIM_OC1Init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[37d]"></a>TIM_OC2Init</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[37e]"></a>TIM_OC3Init</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[37f]"></a>TIM_OC4Init</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[192]"></a>TIM_SetIC4Prescaler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[190]"></a>TIM_SetIC3Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[18e]"></a>TIM_SetIC2Prescaler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[18c]"></a>TIM_SetIC1Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[18a]"></a>TIM_ICInit</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI3_Config
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI4_Config
</UL>

<P><STRONG><a name="[193]"></a>TIM_PWMIConfig</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[380]"></a>TIM_BDTRConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[381]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[382]"></a>TIM_OCStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[383]"></a>TIM_ICStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[384]"></a>TIM_BDTRStructInit</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[fd]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_Int_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Int_Init
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Init_Config
</UL>

<P><STRONG><a name="[385]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[fb]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_Int_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Int_Init
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Init_Config
</UL>

<P><STRONG><a name="[386]"></a>TIM_GenerateEvent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[387]"></a>TIM_DMAConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[388]"></a>TIM_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[389]"></a>TIM_InternalClockConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[195]"></a>TIM_SelectInputTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRxExternalClockConfig
</UL>

<P><STRONG><a name="[194]"></a>TIM_ITRxExternalClockConfig</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
</UL>

<P><STRONG><a name="[196]"></a>TIM_TIxExternalClockConfig</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[198]"></a>TIM_ETRConfig</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode2Config
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode1Config
</UL>

<P><STRONG><a name="[197]"></a>TIM_ETRClockMode1Config</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[199]"></a>TIM_ETRClockMode2Config</STRONG> (Thumb, 32 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[38a]"></a>TIM_PrescalerConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[38b]"></a>TIM_CounterModeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[38c]"></a>TIM_EncoderInterfaceConfig</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[38d]"></a>TIM_ForcedOC1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[38e]"></a>TIM_ForcedOC2Config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[38f]"></a>TIM_ForcedOC3Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[390]"></a>TIM_ForcedOC4Config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[391]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[392]"></a>TIM_SelectCOM</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[393]"></a>TIM_SelectCCDMA</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[394]"></a>TIM_CCPreloadControl</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[395]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[396]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[397]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[398]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[399]"></a>TIM_OC1FastConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[39a]"></a>TIM_OC2FastConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[39b]"></a>TIM_OC3FastConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[39c]"></a>TIM_OC4FastConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[39d]"></a>TIM_ClearOC1Ref</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[39e]"></a>TIM_ClearOC2Ref</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[39f]"></a>TIM_ClearOC3Ref</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3a0]"></a>TIM_ClearOC4Ref</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3a1]"></a>TIM_OC1PolarityConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3a2]"></a>TIM_OC1NPolarityConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3a3]"></a>TIM_OC2PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3a4]"></a>TIM_OC2NPolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3a5]"></a>TIM_OC3PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3a6]"></a>TIM_OC3NPolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3a7]"></a>TIM_OC4PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3a8]"></a>TIM_CCxCmd</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3a9]"></a>TIM_CCxNCmd</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3aa]"></a>TIM_SelectOCxM</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3ab]"></a>TIM_UpdateDisableConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3ac]"></a>TIM_UpdateRequestConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3ad]"></a>TIM_SelectHallSensor</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3ae]"></a>TIM_SelectOnePulseMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3af]"></a>TIM_SelectOutputTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3b0]"></a>TIM_SelectSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3b1]"></a>TIM_SelectMasterSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3b2]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3b3]"></a>TIM_SetAutoreload</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3b4]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3b5]"></a>TIM_SetCompare2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3b6]"></a>TIM_SetCompare3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3b7]"></a>TIM_SetCompare4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3b8]"></a>TIM_SetClockDivision</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3b9]"></a>TIM_GetCapture1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3ba]"></a>TIM_GetCapture2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3bb]"></a>TIM_GetCapture3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3bc]"></a>TIM_GetCapture4</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3bd]"></a>TIM_GetCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3be]"></a>TIM_GetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3bf]"></a>TIM_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3c0]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[ff]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[100]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[3c1]"></a>EXTI_DeInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[134]"></a>EXTI_Init</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIX_Init_WG2
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIX_Init_WG1
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_GPIO_Configuration
</UL>

<P><STRONG><a name="[3c2]"></a>EXTI_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[3c3]"></a>EXTI_GenerateSWInterrupt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[3c4]"></a>EXTI_GetFlagStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[3c5]"></a>EXTI_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[135]"></a>EXTI_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[136]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[3c6]"></a>FLASH_SetLatency</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[3c7]"></a>FLASH_HalfCycleAccessCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[3c8]"></a>FLASH_PrefetchBufferCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[174]"></a>FLASH_Unlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Erase
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
</UL>

<P><STRONG><a name="[3c9]"></a>FLASH_UnlockBank1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[176]"></a>FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Erase
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
</UL>

<P><STRONG><a name="[3ca]"></a>FLASH_LockBank1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[19b]"></a>FLASH_GetBank1Status</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastBank1Operation
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[19a]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetBank1Status
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_UserOptionByteConfig
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReadOutProtection
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EnableWriteProtection
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramOptionByteData
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseOptionBytes
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseAllPages
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>

<P><STRONG><a name="[175]"></a>FLASH_ErasePage</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Erase
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
</UL>

<P><STRONG><a name="[19c]"></a>FLASH_EraseAllPages</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[19d]"></a>FLASH_WaitForLastBank1Operation</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetBank1Status
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseAllBank1Pages
</UL>

<P><STRONG><a name="[19e]"></a>FLASH_EraseAllBank1Pages</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastBank1Operation
</UL>

<P><STRONG><a name="[1a0]"></a>FLASH_GetReadOutProtectionStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseOptionBytes
</UL>

<P><STRONG><a name="[19f]"></a>FLASH_EraseOptionBytes</STRONG> (Thumb, 150 bytes, Stack size 12 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetReadOutProtectionStatus
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[1a1]"></a>FLASH_ProgramWord</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[170]"></a>FLASH_ProgramHalfWord</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write_NoCheck
</UL>

<P><STRONG><a name="[1a2]"></a>FLASH_ProgramOptionByteData</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[1a3]"></a>FLASH_EnableWriteProtection</STRONG> (Thumb, 200 bytes, Stack size 28 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[1a4]"></a>FLASH_ReadOutProtection</STRONG> (Thumb, 156 bytes, Stack size 12 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[1a5]"></a>FLASH_UserOptionByteConfig</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[3cb]"></a>FLASH_GetUserOptionByte</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[3cc]"></a>FLASH_GetWriteProtectionOptionByte</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[3cd]"></a>FLASH_GetPrefetchBufferStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[3ce]"></a>FLASH_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[3cf]"></a>FLASH_GetFlagStatus</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[3d0]"></a>FLASH_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[3d1]"></a>FLASH_GetStatus</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[122]"></a>IWDG_WriteAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
</UL>

<P><STRONG><a name="[123]"></a>IWDG_SetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
</UL>

<P><STRONG><a name="[124]"></a>IWDG_SetReload</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
</UL>

<P><STRONG><a name="[125]"></a>IWDG_ReloadCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
</UL>

<P><STRONG><a name="[126]"></a>IWDG_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
</UL>

<P><STRONG><a name="[3d2]"></a>IWDG_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text), UNUSED)

<P><STRONG><a name="[1a6]"></a>SPI_I2S_DeInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[120]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_SetSpeed
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Configuration
</UL>

<P><STRONG><a name="[1a7]"></a>I2S_Init</STRONG> (Thumb, 226 bytes, Stack size 56 bytes, stm32f10x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>

<P><STRONG><a name="[3d3]"></a>SPI_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[3d4]"></a>I2S_StructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[121]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_SetSpeed
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Configuration
</UL>

<P><STRONG><a name="[3d5]"></a>I2S_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[3d6]"></a>SPI_I2S_ITConfig</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[3d7]"></a>SPI_I2S_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[11e]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Send_Byte
</UL>

<P><STRONG><a name="[11f]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SOCK_Data_Buffer
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500_SOCK_2Byte
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500_SOCK_1Byte
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500_1Byte
</UL>

<P><STRONG><a name="[3d8]"></a>SPI_NSSInternalSoftwareConfig</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[3d9]"></a>SPI_SSOutputCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[3da]"></a>SPI_DataSizeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[3db]"></a>SPI_TransmitCRC</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[3dc]"></a>SPI_CalculateCRC</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[3dd]"></a>SPI_GetCRC</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[3de]"></a>SPI_GetCRCPolynomial</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[3df]"></a>SPI_BiDirectionalLineConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[11d]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Send_Byte
</UL>

<P><STRONG><a name="[3e0]"></a>SPI_I2S_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[3e1]"></a>SPI_I2S_GetITStatus</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[3e2]"></a>SPI_I2S_ClearITPendingBit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>RC522_Init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rc522_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RC522_Init &rArr; M500PcdConfigISOType &rArr; PcdAntennaOn &rArr; SetBitMask &rArr; WriteRawRC &rArr; SPI_RC522_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReset
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M500PcdConfigISOType
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_SPI_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystemHardware
</UL>

<P><STRONG><a name="[1ab]"></a>IC_test</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, rc522_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRequest
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAnticoll
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindCardno
</UL>

<P><STRONG><a name="[1af]"></a>SPI_RC522_SendByte</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, rc522_function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_RC522_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRawRC
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRawRC
</UL>

<P><STRONG><a name="[1b0]"></a>SPI_RC522_ReadByte</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, rc522_function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_RC522_ReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRawRC
</UL>

<P><STRONG><a name="[1b2]"></a>ReadRawRC</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, rc522_function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ReadRawRC &rArr; SPI_RC522_ReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RC522_ReadByte
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RC522_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAuthState
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalulateCRC
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAntennaOn
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBitMask
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReset
</UL>

<P><STRONG><a name="[1b3]"></a>WriteRawRC</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, rc522_function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WriteRawRC &rArr; SPI_RC522_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RC522_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalulateCRC
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBitMask
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReset
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRequest
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAnticoll
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M500PcdConfigISOType
</UL>

<P><STRONG><a name="[1b4]"></a>SetBitMask</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, rc522_function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SetBitMask &rArr; WriteRawRC &rArr; SPI_RC522_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRawRC
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRawRC
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalulateCRC
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAntennaOn
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRequest
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAnticoll
</UL>

<P><STRONG><a name="[1b5]"></a>ClearBitMask</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, rc522_function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ClearBitMask &rArr; WriteRawRC &rArr; SPI_RC522_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRawRC
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRawRC
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelect
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalulateCRC
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAntennaOff
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRequest
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAnticoll
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M500PcdConfigISOType
</UL>

<P><STRONG><a name="[1b6]"></a>PcdAntennaOn</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rc522_function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PcdAntennaOn &rArr; SetBitMask &rArr; WriteRawRC &rArr; SPI_RC522_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBitMask
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRawRC
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M500PcdConfigISOType
</UL>

<P><STRONG><a name="[1b7]"></a>PcdAntennaOff</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rc522_function.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
</UL>

<P><STRONG><a name="[1a9]"></a>PcdReset</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, rc522_function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PcdReset &rArr; WriteRawRC &rArr; SPI_RC522_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRawRC
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRawRC
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_Init
</UL>

<P><STRONG><a name="[1aa]"></a>M500PcdConfigISOType</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, rc522_function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = M500PcdConfigISOType &rArr; PcdAntennaOn &rArr; SetBitMask &rArr; WriteRawRC &rArr; SPI_RC522_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAntennaOn
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRawRC
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_Init
</UL>

<P><STRONG><a name="[1b8]"></a>PcdComMF522</STRONG> (Thumb, 306 bytes, Stack size 48 bytes, rc522_function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = PcdComMF522 &rArr; ClearBitMask &rArr; WriteRawRC &rArr; SPI_RC522_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBitMask
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRawRC
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRawRC
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdHalt
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRead
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdWrite
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAuthState
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelect
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRequest
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAnticoll
</UL>

<P><STRONG><a name="[1ac]"></a>PcdRequest</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, rc522_function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = PcdRequest &rArr; PcdComMF522 &rArr; ClearBitMask &rArr; WriteRawRC &rArr; SPI_RC522_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBitMask
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRawRC
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IC_CMT
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IC_test
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindICCard
</UL>

<P><STRONG><a name="[1ad]"></a>PcdAnticoll</STRONG> (Thumb, 126 bytes, Stack size 48 bytes, rc522_function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = PcdAnticoll &rArr; PcdComMF522 &rArr; ClearBitMask &rArr; WriteRawRC &rArr; SPI_RC522_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBitMask
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRawRC
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IC_CMT
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IC_test
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindICCard
</UL>

<P><STRONG><a name="[1b9]"></a>CalulateCRC</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, rc522_function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CalulateCRC &rArr; ClearBitMask &rArr; WriteRawRC &rArr; SPI_RC522_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBitMask
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRawRC
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRawRC
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdHalt
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRead
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdWrite
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelect
</UL>

<P><STRONG><a name="[1ba]"></a>PcdSelect</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, rc522_function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = PcdSelect &rArr; PcdComMF522 &rArr; ClearBitMask &rArr; WriteRawRC &rArr; SPI_RC522_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalulateCRC
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IC_CMT
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindICCard
</UL>

<P><STRONG><a name="[1bb]"></a>PcdAuthState</STRONG> (Thumb, 112 bytes, Stack size 56 bytes, rc522_function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = PcdAuthState &rArr; PcdComMF522 &rArr; ClearBitMask &rArr; WriteRawRC &rArr; SPI_RC522_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRawRC
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IC_CMT
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockWrite
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSectionData
</UL>

<P><STRONG><a name="[1bc]"></a>PcdWrite</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, rc522_function.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalulateCRC
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IC_CMT
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockWrite
</UL>

<P><STRONG><a name="[1bd]"></a>PcdRead</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, rc522_function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = PcdRead &rArr; PcdComMF522 &rArr; ClearBitMask &rArr; WriteRawRC &rArr; SPI_RC522_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalulateCRC
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IC_CMT
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSectionData
</UL>

<P><STRONG><a name="[1be]"></a>PcdHalt</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, rc522_function.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalulateCRC
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IC_CMT
</UL>

<P><STRONG><a name="[1bf]"></a>IC_CMT</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, rc522_function.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdHalt
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRead
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdWrite
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAuthState
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelect
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRequest
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAnticoll
</UL>

<P><STRONG><a name="[b4]"></a>DS1302_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ds1302.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DS1302_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystemHardware
</UL>

<P><STRONG><a name="[1c0]"></a>DS1302_Write_Byte</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, ds1302.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DS1302_Write_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1302_Write_Time
</UL>

<P><STRONG><a name="[1c1]"></a>DS1302_Read_Byte</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, ds1302.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DS1302_Read_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1302_Read_Time
</UL>

<P><STRONG><a name="[1c7]"></a>GetWeek</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, ds1302.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetWeek
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNowTime
</UL>

<P><STRONG><a name="[1c2]"></a>DS1302_Write_Time</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, ds1302.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DS1302_Write_Time &rArr; DS1302_Write_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1302_Write_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNowTime
</UL>

<P><STRONG><a name="[1c3]"></a>DS1302_Read_Time</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, ds1302.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DS1302_Read_Time &rArr; DS1302_Read_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1302_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1302_Get_Time
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1302_Get_sysTime
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD12864_Standby
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCard
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Standby
</UL>

<P><STRONG><a name="[1c4]"></a>DS1302_Get_sysTime</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ds1302.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DS1302_Get_sysTime &rArr; DS1302_Read_Time &rArr; DS1302_Read_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1302_Read_Time
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTime
</UL>

<P><STRONG><a name="[1c5]"></a>DS1302_Get_Time</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, ds1302.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1302_Read_Time
</UL>

<P><STRONG><a name="[1c6]"></a>SetNowTime</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ds1302.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SetNowTime &rArr; GetWeek
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1302_Write_Time
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWeek
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTime
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun19
</UL>

<P><STRONG><a name="[e8]"></a>AnalyzeWorkStatus</STRONG> (Thumb, 248 bytes, Stack size 8 bytes, sysvar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = AnalyzeWorkStatus &rArr; LCD_Disp_Function &rArr; DrawRect &rArr; SPI_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun5
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowKeyValue_Plus
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Standby
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Show_Consump_Pattern
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowKeyValue
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_Query_Money
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_MenuPassword
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_MenuMain
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_Function
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWorkStatus
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Standby_Display_Time
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c9]"></a>InitOutput</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sysvar.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystemParameter
</UL>

<P><STRONG><a name="[20d]"></a>BeginOutput1</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, sysvar.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowPlay_Card
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WP_ProcessCard
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCard
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Open_Door
</UL>

<P><STRONG><a name="[e9]"></a>EndOutput1</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sysvar.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20c]"></a>BeginOutput2</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sysvar.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCard
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Open_Door
</UL>

<P><STRONG><a name="[ea]"></a>EndOutput2</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sysvar.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f2]"></a>CheckInit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, sysvar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CheckInit &rArr; LoadDefaultValue &rArr; SetPassword &rArr; InitPassword &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadDefaultValue
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d3]"></a>Get_ChipInfo</STRONG> (Thumb, 186 bytes, Stack size 80 bytes, sysvar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Get_ChipInfo &rArr; RS485_Send_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Send_Data
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrCPY
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_4_data
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ChipInfo_Com
</UL>

<P><STRONG><a name="[2d0]"></a>Menu_CheckKEY</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, keyfun.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_key_set
</UL>

<P><STRONG><a name="[1d6]"></a>SetWorkStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, keyfun.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_key_set
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckKEY
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessKEYCMD
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UndoPressKEY
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun81
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun50
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun49
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun45
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun44
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun40
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun39
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun35
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun34
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun30
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun29
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun25
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun24
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun20
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun19
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun15
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun14
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun10
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun9
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun1
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun0
</UL>

<P><STRONG><a name="[1c8]"></a>GetWorkStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, keyfun.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessReal_time_upload
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyzeWorkStatus
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessKEYCMD
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun50
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun49
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun45
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun44
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun40
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun39
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun35
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun34
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun30
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun29
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun28
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun27
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun25
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun24
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun20
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun19
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun15
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun14
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun13
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun12
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun10
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun9
</UL>

<P><STRONG><a name="[1d7]"></a>Clear_Key_Status</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, keyfun.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UndoPressKEY
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun0
</UL>

<P><STRONG><a name="[1d5]"></a>UndoPressKEY</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, keyfun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UndoPressKEY
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Key_Status
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWorkStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessReal_time_upload
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessKEYCMD
</UL>

<P><STRONG><a name="[1d8]"></a>ProcessKEYCMD</STRONG> (Thumb, 420 bytes, Stack size 24 bytes, keyfun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = ProcessKEYCMD &rArr; SYN6288_Send &rArr; SPEAKUART_SendString &rArr; MUSART1_SendData &rArr; TX_H
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDectoBCD
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYN6288_Send
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrCPY
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;separate_value_1_4
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBCDtoDec
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UndoPressKEY
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWorkStatus
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWorkStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckKEY
</UL>

<P><STRONG><a name="[1db]"></a>CheckKEY</STRONG> (Thumb, 366 bytes, Stack size 24 bytes, keyfun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = CheckKEY &rArr; ProcessKEYCMD &rArr; SYN6288_Send &rArr; SPEAKUART_SendString &rArr; MUSART1_SendData &rArr; TX_H
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDectoBCD
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrCPY
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;separate_value_1_4
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBCDtoDec
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Standby_Display
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessKEYCMD
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWorkStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_key_set
</UL>

<P><STRONG><a name="[1fe]"></a>MyStrEQ</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, syscomm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MyStrEQ
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Wisdom_plate
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRS485
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process4G_Commu
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindCardno
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmKeyscan
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessQR_QRRead
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelUPloadRecord
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_FindCardno
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WP_CheckCard
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCard
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRecord
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_TCP_Mode
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTCPServerData
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTCPClientData
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessUDPClient
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun84
</UL>

<P><STRONG><a name="[16d]"></a>MyStrCPY</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, syscomm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MyStrCPY
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Wisdom_plate
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessReal_time_upload
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_EC20_Remote_IP
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heartbeat_Send
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindCardno
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_Volume
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Power_Signal
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wisdom_plate_Card_Read
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmKeyscan
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wisdom_plate_Return
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD12864_ShowPlay_Card
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBlock1
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debit_fun
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelUPloadRecord
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIsectiond
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newCheck_Card_Limit
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UPloadRecord
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPassword
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyzeSectionData
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WP_CheckCard
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindICCard
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSectionData
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IAP_Data
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelOneCardno
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_IAP_Start_Updata
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_DelOneCardno
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_AddOneCardno
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arrange_Record
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRecord
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddOneCardno
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_IAP_Read_Data
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Handle_IAP_Data
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoUP_GPS_Information
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Query_Balance_Return
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Carte_Consum_Money
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Fixed_consumption_Money
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Fixed_consumption_Timer
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Machine_Category
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Sub_Maximum_Limit
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_MaxRecord
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRecord_Address
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_Synchronization_Time
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUpdata_MaxRecord
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Realtime_Upload_Return
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_TCP4G_Remote_IP
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_TCP_Remote_IP
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_TCP_Local_IP
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReyurnGETCommand_Value
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAEI_IC_Conversion
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckKEY
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessKEYCMD
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ChipInfo
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessUDPClient
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_MAC_Address
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLocalIPGateway
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRemoteIPandPORT
</UL>

<P><STRONG><a name="[1e8]"></a>GetXOR</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, syscomm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetXOR
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRS485
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process4G_Commu
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heartbeat_Send
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYN6288_Send
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Power_Signal
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessQR_QRRead
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debit_fun
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UPloadRecord
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_IAP_Read_Data
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoUP_GPS_Information
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_MaxRecord
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRecord_Address
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBackGroupName
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWhiteGroupName
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUpdata_MaxRecord
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReyurnGETCommand_Value
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTCPServerData
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTCPClientData
</UL>

<P><STRONG><a name="[278]"></a>MyStrCMP</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, syscomm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MyStrCMP
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Channel_Time_Detection
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Passage_Enable
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Time_slot_1
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Interval_Detection
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Holiday_Detection
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HolidayTime_Interval_Detection
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Card_Limit
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Consum_Time_Detection
</UL>

<P><STRONG><a name="[e4]"></a>Beep</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, syscomm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Beep
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process4G_Commu
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_key_set
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_AddCardno
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessQR_Commu
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WP_ProcessCard
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Card_Limit
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCardno
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_IAP_Read_Data
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_MaxRecord
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRecord_Address
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBackGroupName
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWhiteGroupName
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUpdata_MaxRecord
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_NO_Open_Door
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ChipInfo_Com
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReyurnGETCommand_Value
</UL>

<P><STRONG><a name="[1dd]"></a>LED1_fun</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, syscomm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[1de]"></a>LED2_fun</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, syscomm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[21b]"></a>GetSum</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, syscomm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetSum
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Wisdom_plate
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wisdom_plate_Return
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_CommFindCardno
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_MakeGroup
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommFindCardno
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeGroup
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBackGroupName
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWhiteGroupName
</UL>

<P><STRONG><a name="[16c]"></a>HexToStr</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, syscomm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HexToStr
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMachno
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_Volume
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD12864_Show_Consump_Pattern
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD12864_ShowKeyValue
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD12864_Standby
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyzeSectionData
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Standby
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Show_Consump_Pattern
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_MenuPassword
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_Function
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun14
</UL>

<P><STRONG><a name="[1df]"></a>StrToHex</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, syscomm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = StrToHex &rArr; toupper &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessQR_QRRead
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessQR_ICRead
</UL>

<P><STRONG><a name="[1e1]"></a>StrTodec</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, syscomm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
</UL>

<P><STRONG><a name="[28a]"></a>HextoBCD</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, syscomm.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettimetobcd
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_interval_fun
</UL>

<P><STRONG><a name="[3e3]"></a>GetASCIIValue</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, syscomm.o(.text), UNUSED)

<P><STRONG><a name="[3e4]"></a>GetBCDValue1</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, syscomm.o(.text), UNUSED)

<P><STRONG><a name="[1e2]"></a>power</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, syscomm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = power
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBCDtoDec
</UL>

<P><STRONG><a name="[1da]"></a>getBCDtoDec</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, syscomm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = getBCDtoDec &rArr; power
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debit_fun
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRecord
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckKEY
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessKEYCMD
</UL>

<P><STRONG><a name="[16b]"></a>getDectoBCD</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, syscomm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = getDectoBCD
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_Volume
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debit_fun
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arrange_Record
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAEI_IC_Conversion
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckKEY
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessKEYCMD
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Standby
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_Function
</UL>

<P><STRONG><a name="[1d4]"></a>turn_4_data</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, syscomm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arrange_Record
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRecord_Address
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMaxRecordCount
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUpdataRecordCount
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ChipInfo
</UL>

<P><STRONG><a name="[3e5]"></a>turn_2_data</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, syscomm.o(.text), UNUSED)

<P><STRONG><a name="[267]"></a>separate_value_2_1</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, syscomm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRS485
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process4G_Commu
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTCPServerData
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTCPClientData
</UL>

<P><STRONG><a name="[1d9]"></a>separate_value_1_4</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, syscomm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckKEY
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessKEYCMD
</UL>

<P><STRONG><a name="[1e3]"></a>GAEI_IC_Conversion</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, syscomm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GAEI_IC_Conversion &rArr; getDectoBCD
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDectoBCD
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrCPY
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WP_CheckCard
</UL>

<P><STRONG><a name="[ca]"></a>InitSysvar</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, syscomm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = InitSysvar &rArr; AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystemParameter
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Check_Sector_Password_Mode
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_ReadorWriteICData_Mode
</UL>

<P><STRONG><a name="[1e4]"></a>SaveSysvar</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, syscomm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
</UL>

<P><STRONG><a name="[1e5]"></a>SaveExtvar</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, syscomm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
</UL>

<P><STRONG><a name="[1e6]"></a>ReyurnCommand_Send</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ReyurnCommand_Send &rArr; Write_SOCK_Data_Buffer &rArr; Read_W5500_SOCK_2Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Send_Data
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_SOCK_Data_Buffer
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EC20_SendString
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_IAP_Read_Data
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_MaxRecord
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRecord_Address
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBackGroupName
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWhiteGroupName
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUpdata_MaxRecord
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReyurnGETCommand_Value
</UL>

<P><STRONG><a name="[1e7]"></a>Send_ReyurnGETCommand_Value</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Send_ReyurnGETCommand_Value &rArr; ReyurnCommand_Send &rArr; Write_SOCK_Data_Buffer &rArr; Read_W5500_SOCK_2Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrCPY
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReyurnCommand_Send
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetXOR
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_IAP_Updata_OK
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Check_IAP_END_Updata
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Handle_IAP_Data
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_IAP_Start_Update
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_IMEI_IMSI_Machno
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_GPS_Information
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Clean_Total_Consumption
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Total_Consumption
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Carte_Consum_Money
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Carte_Consum_Money
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Fixed_consumption_Money
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Fixed_consumption_Money
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Fixed_consumption_Timer
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Fixed_consumption_Timer
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Machine_Category
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Machine_Category
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Sub_Maximum_Limit
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Sub_Maximum_Limit
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Holiday_Vacations
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Holiday_Vacations
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Passage_Time
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Passage_Time
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Passage_Time_Enable
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Permission_Period
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Permission_Period
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Extvar
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Check_Sector_Password_Mode
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_ReadorWriteICData_Mode
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Interval_delay
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearRecord
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMaxRecordCount
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelOneBackGroupName
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddOneBackGroupName
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBackName
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBackGroupName
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelOneWhiteGroupName
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddOneWhiteGroupName
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearWhiteName
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWhiteGroupName
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBackWhiteNamesize
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataRecordTEST
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearUpdataRecord
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUpdata_MaxRecord
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUpdataRecordCount
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Realtime_Upload_Return
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_NO_Open_Door
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Open_Door
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_TCP4G_Remote_IP
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_TCP4G_Remote_IP
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_TCP_Remote_IP
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_TCP_Remote_IP
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_TCP_Local_IP
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_TCP_Local_IP
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_This_MAC
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_This_MAC
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_TCP_Mode
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_ResNottore_factory
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Restore_factory
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_sysvar
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_list_enabled
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Output_delay
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Clock_delay
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSectionAndPassword
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSectionAndPassword
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTime
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTime
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMachno
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMachno
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVersion
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMachType
</UL>

<P><STRONG><a name="[1e9]"></a>GetMachType</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = GetMachType &rArr; Send_ReyurnGETCommand_Value &rArr; ReyurnCommand_Send &rArr; Write_SOCK_Data_Buffer &rArr; Read_W5500_SOCK_2Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReyurnGETCommand_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[1ea]"></a>GetVersion</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = GetVersion &rArr; Send_ReyurnGETCommand_Value &rArr; ReyurnCommand_Send &rArr; Write_SOCK_Data_Buffer &rArr; Read_W5500_SOCK_2Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReyurnGETCommand_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[1eb]"></a>SetMachno</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SetMachno &rArr; Send_ReyurnGETCommand_Value &rArr; ReyurnCommand_Send &rArr; Write_SOCK_Data_Buffer &rArr; Read_W5500_SOCK_2Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveMachno
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReyurnGETCommand_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[1ed]"></a>GetMachno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = GetMachno &rArr; Send_ReyurnGETCommand_Value &rArr; ReyurnCommand_Send &rArr; Write_SOCK_Data_Buffer &rArr; Read_W5500_SOCK_2Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReyurnGETCommand_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[1ee]"></a>SetTime</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SetTime &rArr; Send_ReyurnGETCommand_Value &rArr; ReyurnCommand_Send &rArr; Write_SOCK_Data_Buffer &rArr; Read_W5500_SOCK_2Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNowTime
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReyurnGETCommand_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[1ef]"></a>GetTime</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = GetTime &rArr; Send_ReyurnGETCommand_Value &rArr; ReyurnCommand_Send &rArr; Write_SOCK_Data_Buffer &rArr; Read_W5500_SOCK_2Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1302_Get_sysTime
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReyurnGETCommand_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[1f0]"></a>SetSectionAndPassword</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SetSectionAndPassword &rArr; Send_ReyurnGETCommand_Value &rArr; ReyurnCommand_Send &rArr; Write_SOCK_Data_Buffer &rArr; Read_W5500_SOCK_2Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPassword
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReyurnGETCommand_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[1f2]"></a>GetSectionAndPassword</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = GetSectionAndPassword &rArr; Send_ReyurnGETCommand_Value &rArr; ReyurnCommand_Send &rArr; Write_SOCK_Data_Buffer &rArr; Read_W5500_SOCK_2Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReyurnGETCommand_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[1f3]"></a>Set_Clock_delay</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Set_Clock_delay &rArr; Send_ReyurnGETCommand_Value &rArr; ReyurnCommand_Send &rArr; Write_SOCK_Data_Buffer &rArr; Read_W5500_SOCK_2Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReyurnGETCommand_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[1f4]"></a>Set_Output_delay</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Set_Output_delay &rArr; Send_ReyurnGETCommand_Value &rArr; ReyurnCommand_Send &rArr; Write_SOCK_Data_Buffer &rArr; Read_W5500_SOCK_2Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReyurnGETCommand_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[1f5]"></a>Set_list_enabled</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Set_list_enabled &rArr; Send_ReyurnGETCommand_Value &rArr; ReyurnCommand_Send &rArr; Write_SOCK_Data_Buffer &rArr; Read_W5500_SOCK_2Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReyurnGETCommand_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[1f6]"></a>Get_sysvar</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Get_sysvar &rArr; Send_ReyurnGETCommand_Value &rArr; ReyurnCommand_Send &rArr; Write_SOCK_Data_Buffer &rArr; Read_W5500_SOCK_2Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReyurnGETCommand_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[1f7]"></a>Set_Restore_factory</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Set_Restore_factory &rArr; Send_ReyurnGETCommand_Value &rArr; ReyurnCommand_Send &rArr; Write_SOCK_Data_Buffer &rArr; Read_W5500_SOCK_2Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reboot
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReyurnGETCommand_Value
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadDefaultValue
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[1f9]"></a>Set_ResNottore_factory</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Set_ResNottore_factory &rArr; Send_ReyurnGETCommand_Value &rArr; ReyurnCommand_Send &rArr; Write_SOCK_Data_Buffer &rArr; Read_W5500_SOCK_2Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_Rest
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reboot
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadnNetDefaultValue
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadnEC20DefaultValue
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReyurnGETCommand_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[1fc]"></a>Get_ChipInfo_Com</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Get_ChipInfo_Com &rArr; Get_ChipInfo &rArr; RS485_Send_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ChipInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[1fd]"></a>Set_TCP_Mode</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, comcmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reboot
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReyurnGETCommand_Value
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrEQ
</UL>

<P><STRONG><a name="[1ff]"></a>Set_This_MAC</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Set_This_MAC &rArr; Send_ReyurnGETCommand_Value &rArr; ReyurnCommand_Send &rArr; Write_SOCK_Data_Buffer &rArr; Read_W5500_SOCK_2Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reboot
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReyurnGETCommand_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[200]"></a>Get_This_MAC</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Get_This_MAC &rArr; Send_ReyurnGETCommand_Value &rArr; ReyurnCommand_Send &rArr; Write_SOCK_Data_Buffer &rArr; Read_W5500_SOCK_2Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReyurnGETCommand_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[201]"></a>Set_TCP_Local_IP</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Set_TCP_Local_IP &rArr; Send_ReyurnGETCommand_Value &rArr; ReyurnCommand_Send &rArr; Write_SOCK_Data_Buffer &rArr; Read_W5500_SOCK_2Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reboot
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReyurnGETCommand_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[202]"></a>Get_TCP_Local_IP</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Get_TCP_Local_IP &rArr; Send_ReyurnGETCommand_Value &rArr; ReyurnCommand_Send &rArr; Write_SOCK_Data_Buffer &rArr; Read_W5500_SOCK_2Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrCPY
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReyurnGETCommand_Value
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[203]"></a>Set_TCP_Remote_IP</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Set_TCP_Remote_IP &rArr; Send_ReyurnGETCommand_Value &rArr; ReyurnCommand_Send &rArr; Write_SOCK_Data_Buffer &rArr; Read_W5500_SOCK_2Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reboot
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReyurnGETCommand_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[204]"></a>Get_TCP_Remote_IP</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Get_TCP_Remote_IP &rArr; Send_ReyurnGETCommand_Value &rArr; ReyurnCommand_Send &rArr; Write_SOCK_Data_Buffer &rArr; Read_W5500_SOCK_2Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrCPY
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReyurnGETCommand_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[205]"></a>Set_TCP4G_Remote_IP</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Set_TCP4G_Remote_IP &rArr; Send_ReyurnGETCommand_Value &rArr; ReyurnCommand_Send &rArr; Write_SOCK_Data_Buffer &rArr; Read_W5500_SOCK_2Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_Rest
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_EC20_Remote_IP
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReyurnGETCommand_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[206]"></a>Get_TCP4G_Remote_IP</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Get_TCP4G_Remote_IP &rArr; Send_ReyurnGETCommand_Value &rArr; ReyurnCommand_Send &rArr; Write_SOCK_Data_Buffer &rArr; Read_W5500_SOCK_2Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrCPY
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReyurnGETCommand_Value
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[207]"></a>Set_Open_Door</STRONG> (Thumb, 260 bytes, Stack size 8 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Set_Open_Door &rArr; SYN6288_Send &rArr; SPEAKUART_SendString &rArr; MUSART1_SendData &rArr; TX_H
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBG_Color
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrScreen
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYN6288_Send
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFontType
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFG_Color
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDisplayInvert
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutString
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReyurnGETCommand_Value
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeginOutput2
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeginOutput1
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[20e]"></a>Set_NO_Open_Door</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Set_NO_Open_Door &rArr; Send_ReyurnGETCommand_Value &rArr; ReyurnCommand_Send &rArr; Write_SOCK_Data_Buffer &rArr; Read_W5500_SOCK_2Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReyurnGETCommand_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[263]"></a>Realtime_Upload_Record</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, comcmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[20f]"></a>Realtime_Upload_Return</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Realtime_Upload_Return &rArr; Send_ReyurnGETCommand_Value &rArr; ReyurnCommand_Send &rArr; Write_SOCK_Data_Buffer &rArr; Read_W5500_SOCK_2Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrCPY
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReyurnGETCommand_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[210]"></a>GetUpdataRecordCount</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = GetUpdataRecordCount &rArr; Send_ReyurnGETCommand_Value &rArr; ReyurnCommand_Send &rArr; Write_SOCK_Data_Buffer &rArr; Read_W5500_SOCK_2Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReyurnGETCommand_Value
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_4_data
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[211]"></a>GetUpdata_MaxRecord</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = GetUpdata_MaxRecord &rArr; Send_ReyurnGETCommand_Value &rArr; ReyurnCommand_Send &rArr; Write_SOCK_Data_Buffer &rArr; Read_W5500_SOCK_2Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25X_Read_Page
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrCPY
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReyurnGETCommand_Value
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReyurnCommand_Send
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetXOR
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[212]"></a>ClearUpdataRecord</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ClearUpdataRecord &rArr; Send_ReyurnGETCommand_Value &rArr; ReyurnCommand_Send &rArr; Write_SOCK_Data_Buffer &rArr; Read_W5500_SOCK_2Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Del_UpdataRecord
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReyurnGETCommand_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[214]"></a>UpdataRecordTEST</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = UpdataRecordTEST &rArr; Send_ReyurnGETCommand_Value &rArr; ReyurnCommand_Send &rArr; Write_SOCK_Data_Buffer &rArr; Read_W5500_SOCK_2Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVolume
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReyurnGETCommand_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[215]"></a>Get_Heartbeat_Send</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Get_Heartbeat_Send &rArr; Heartbeat_Send &rArr; EC20_SendString
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heartbeat_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[216]"></a>Heartbeat_Return</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Heartbeat_Return
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Heartbeat
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[217]"></a>Network_Synchronization_Time</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Network_Synchronization_Time &rArr; EC20_SendString
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrCPY
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EC20_SendString
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun19
</UL>

<P><STRONG><a name="[166]"></a>Send_Power_Signal</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Send_Power_Signal &rArr; EC20_SendString
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrCPY
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EC20_SendString
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetXOR
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_QIOPEN
</UL>

<P><STRONG><a name="[219]"></a>GetBackWhiteNamesize</STRONG> (Thumb, 312 bytes, Stack size 160 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = GetBackWhiteNamesize &rArr; Send_ReyurnGETCommand_Value &rArr; ReyurnCommand_Send &rArr; Write_SOCK_Data_Buffer &rArr; Read_W5500_SOCK_2Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_2_Read
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReyurnGETCommand_Value
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[21a]"></a>SetWhiteGroupName</STRONG> (Thumb, 304 bytes, Stack size 16 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SetWhiteGroupName &rArr; Send_ReyurnGETCommand_Value &rArr; ReyurnCommand_Send &rArr; Write_SOCK_Data_Buffer &rArr; Read_W5500_SOCK_2Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_2_Write1
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_2_Write
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveGroupCount
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveCommCount
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGroupCount
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGroupAddress
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCommCount
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReyurnGETCommand_Value
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSum
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[221]"></a>GetWhiteGroupName</STRONG> (Thumb, 290 bytes, Stack size 112 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = GetWhiteGroupName &rArr; ReyurnCommand_Send &rArr; Write_SOCK_Data_Buffer &rArr; Read_W5500_SOCK_2Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_2_Read
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_2_ReadOneByte
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReyurnCommand_Send
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetXOR
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[222]"></a>ClearWhiteName</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ClearWhiteName &rArr; Send_ReyurnGETCommand_Value &rArr; ReyurnCommand_Send &rArr; Write_SOCK_Data_Buffer &rArr; Read_W5500_SOCK_2Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_2_WriteOneByte
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReyurnGETCommand_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[223]"></a>AddOneWhiteGroupName</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = AddOneWhiteGroupName &rArr; AddOneCardno &rArr; FindCardno &rArr; MakeGroup &rArr; GetGroupCount &rArr; AT24CXX_2_Read &rArr; AT24CXX_2_ReadOneByte &rArr; IIC_2_Read_Byte &rArr; IIC_2_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddOneCardno
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReyurnGETCommand_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[225]"></a>DelOneWhiteGroupName</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = DelOneWhiteGroupName &rArr; DelOneCardno &rArr; DelCardno &rArr; CommFindCardno &rArr; AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelOneCardno
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReyurnGETCommand_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[227]"></a>SetBackGroupName</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SetBackGroupName &rArr; Send_ReyurnGETCommand_Value &rArr; ReyurnCommand_Send &rArr; Write_SOCK_Data_Buffer &rArr; Read_W5500_SOCK_2Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_SaveGroupCount
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_SaveCommCount
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_GetGroupCount
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_GetGroupAddress
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_GetCommCount
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReyurnGETCommand_Value
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSum
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[22d]"></a>GetBackGroupName</STRONG> (Thumb, 328 bytes, Stack size 104 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = GetBackGroupName &rArr; ReyurnCommand_Send &rArr; Write_SOCK_Data_Buffer &rArr; Read_W5500_SOCK_2Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReyurnCommand_Send
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetXOR
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[22e]"></a>ClearBackName</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ClearBackName &rArr; Send_ReyurnGETCommand_Value &rArr; ReyurnCommand_Send &rArr; Write_SOCK_Data_Buffer &rArr; Read_W5500_SOCK_2Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReyurnGETCommand_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[22f]"></a>AddOneBackGroupName</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = AddOneBackGroupName &rArr; Send_ReyurnGETCommand_Value &rArr; ReyurnCommand_Send &rArr; Write_SOCK_Data_Buffer &rArr; Read_W5500_SOCK_2Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_AddOneCardno
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReyurnGETCommand_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[231]"></a>DelOneBackGroupName</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = DelOneBackGroupName &rArr; Back_DelOneCardno &rArr; Back_DelCardno &rArr; Back_CommFindCardno &rArr; AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_DelOneCardno
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReyurnGETCommand_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[233]"></a>GetMaxRecordCount</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = GetMaxRecordCount &rArr; Send_ReyurnGETCommand_Value &rArr; ReyurnCommand_Send &rArr; Write_SOCK_Data_Buffer &rArr; Read_W5500_SOCK_2Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReyurnGETCommand_Value
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_4_data
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[234]"></a>GetRecord_Address</STRONG> (Thumb, 320 bytes, Stack size 32 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = GetRecord_Address &rArr; ReyurnCommand_Send &rArr; Write_SOCK_Data_Buffer &rArr; Read_W5500_SOCK_2Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Read
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrCPY
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReyurnCommand_Send
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetXOR
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_4_data
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[235]"></a>Get_MaxRecord</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Get_MaxRecord &rArr; ReyurnCommand_Send &rArr; Write_SOCK_Data_Buffer &rArr; Read_W5500_SOCK_2Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25X_Read_Page
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrCPY
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReyurnCommand_Send
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetXOR
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[236]"></a>ClearRecord</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ClearRecord &rArr; Send_ReyurnGETCommand_Value &rArr; ReyurnCommand_Send &rArr; Write_SOCK_Data_Buffer &rArr; Read_W5500_SOCK_2Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveRecordcount_Err
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteConsumption_All_Money
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReyurnGETCommand_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[239]"></a>Set_Interval_delay</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Set_Interval_delay &rArr; Send_ReyurnGETCommand_Value &rArr; ReyurnCommand_Send &rArr; Write_SOCK_Data_Buffer &rArr; Read_W5500_SOCK_2Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReyurnGETCommand_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[23a]"></a>Set_ReadorWriteICData_Mode</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Set_ReadorWriteICData_Mode &rArr; Send_ReyurnGETCommand_Value &rArr; ReyurnCommand_Send &rArr; Write_SOCK_Data_Buffer &rArr; Read_W5500_SOCK_2Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSysvar
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReyurnGETCommand_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[23b]"></a>Set_Check_Sector_Password_Mode</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Set_Check_Sector_Password_Mode &rArr; Send_ReyurnGETCommand_Value &rArr; ReyurnCommand_Send &rArr; Write_SOCK_Data_Buffer &rArr; Read_W5500_SOCK_2Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSysvar
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReyurnGETCommand_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[23c]"></a>Get_Extvar</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Get_Extvar &rArr; Send_ReyurnGETCommand_Value &rArr; ReyurnCommand_Send &rArr; Write_SOCK_Data_Buffer &rArr; Read_W5500_SOCK_2Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReyurnGETCommand_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[23d]"></a>Set_Permission_Period</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Set_Permission_Period &rArr; Send_ReyurnGETCommand_Value &rArr; ReyurnCommand_Send &rArr; Write_SOCK_Data_Buffer &rArr; Read_W5500_SOCK_2Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTime_Interval_Detection
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReyurnGETCommand_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[23e]"></a>Get_Permission_Period</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Get_Permission_Period &rArr; Send_ReyurnGETCommand_Value &rArr; ReyurnCommand_Send &rArr; Write_SOCK_Data_Buffer &rArr; Read_W5500_SOCK_2Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReyurnGETCommand_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[23f]"></a>Set_Passage_Time_Enable</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Set_Passage_Time_Enable &rArr; Send_ReyurnGETCommand_Value &rArr; ReyurnCommand_Send &rArr; Write_SOCK_Data_Buffer &rArr; Read_W5500_SOCK_2Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPassage_TimeEnable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReyurnGETCommand_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[240]"></a>Set_Passage_Time</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Set_Passage_Time &rArr; Send_ReyurnGETCommand_Value &rArr; ReyurnCommand_Send &rArr; Write_SOCK_Data_Buffer &rArr; Read_W5500_SOCK_2Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPassage_Time
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReyurnGETCommand_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[241]"></a>Get_Passage_Time</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Get_Passage_Time &rArr; Send_ReyurnGETCommand_Value &rArr; ReyurnCommand_Send &rArr; Write_SOCK_Data_Buffer &rArr; Read_W5500_SOCK_2Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReyurnGETCommand_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[242]"></a>Set_Holiday_Vacations</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Set_Holiday_Vacations &rArr; Send_ReyurnGETCommand_Value &rArr; ReyurnCommand_Send &rArr; Write_SOCK_Data_Buffer &rArr; Read_W5500_SOCK_2Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHoliday_Vacations
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReyurnGETCommand_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[243]"></a>Get_Holiday_Vacations</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Get_Holiday_Vacations &rArr; Send_ReyurnGETCommand_Value &rArr; ReyurnCommand_Send &rArr; Write_SOCK_Data_Buffer &rArr; Read_W5500_SOCK_2Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReyurnGETCommand_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[244]"></a>TEST_GQ</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TEST_GQ &rArr; AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[245]"></a>Set_Sub_Maximum_Limit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Set_Sub_Maximum_Limit &rArr; Send_ReyurnGETCommand_Value &rArr; ReyurnCommand_Send &rArr; Write_SOCK_Data_Buffer &rArr; Read_W5500_SOCK_2Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrCPY
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveSub_Maximum_Limit
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReyurnGETCommand_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[247]"></a>Get_Sub_Maximum_Limit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Get_Sub_Maximum_Limit &rArr; Send_ReyurnGETCommand_Value &rArr; ReyurnCommand_Send &rArr; Write_SOCK_Data_Buffer &rArr; Read_W5500_SOCK_2Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReyurnGETCommand_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[248]"></a>Set_Machine_Category</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Set_Machine_Category &rArr; Send_ReyurnGETCommand_Value &rArr; ReyurnCommand_Send &rArr; Write_SOCK_Data_Buffer &rArr; Read_W5500_SOCK_2Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrCPY
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveMachine_Category
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReyurnGETCommand_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[24a]"></a>Get_Machine_Category</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Get_Machine_Category &rArr; Send_ReyurnGETCommand_Value &rArr; ReyurnCommand_Send &rArr; Write_SOCK_Data_Buffer &rArr; Read_W5500_SOCK_2Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReyurnGETCommand_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[24b]"></a>Set_Fixed_consumption_Timer</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Set_Fixed_consumption_Timer &rArr; Send_ReyurnGETCommand_Value &rArr; ReyurnCommand_Send &rArr; Write_SOCK_Data_Buffer &rArr; Read_W5500_SOCK_2Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFixed_consumption_Timer
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrCPY
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReyurnGETCommand_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[24c]"></a>Get_Fixed_consumption_Timer</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Get_Fixed_consumption_Timer &rArr; Send_ReyurnGETCommand_Value &rArr; ReyurnCommand_Send &rArr; Write_SOCK_Data_Buffer &rArr; Read_W5500_SOCK_2Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReyurnGETCommand_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[24d]"></a>Set_Fixed_consumption_Money</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Set_Fixed_consumption_Money &rArr; Send_ReyurnGETCommand_Value &rArr; ReyurnCommand_Send &rArr; Write_SOCK_Data_Buffer &rArr; Read_W5500_SOCK_2Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFixed_consumption_Money
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrCPY
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReyurnGETCommand_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[24e]"></a>Get_Fixed_consumption_Money</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Get_Fixed_consumption_Money &rArr; Send_ReyurnGETCommand_Value &rArr; ReyurnCommand_Send &rArr; Write_SOCK_Data_Buffer &rArr; Read_W5500_SOCK_2Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReyurnGETCommand_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[24f]"></a>Set_Carte_Consum_Money</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Set_Carte_Consum_Money &rArr; Send_ReyurnGETCommand_Value &rArr; ReyurnCommand_Send &rArr; Write_SOCK_Data_Buffer &rArr; Read_W5500_SOCK_2Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCarte_consum_Money
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrCPY
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReyurnGETCommand_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[250]"></a>Get_Carte_Consum_Money</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Get_Carte_Consum_Money &rArr; Send_ReyurnGETCommand_Value &rArr; ReyurnCommand_Send &rArr; Write_SOCK_Data_Buffer &rArr; Read_W5500_SOCK_2Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReyurnGETCommand_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[251]"></a>Query_Balance_Return</STRONG> (Thumb, 366 bytes, Stack size 48 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Query_Balance_Return &rArr; PutString &rArr; SPI_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBG_Color
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrScreen
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrCPY
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFontType
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFG_Color
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDisplayInvert
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutString
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Standby_Display_Time
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[252]"></a>Get_Total_Consumption</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Get_Total_Consumption &rArr; Send_ReyurnGETCommand_Value &rArr; ReyurnCommand_Send &rArr; Write_SOCK_Data_Buffer &rArr; Read_W5500_SOCK_2Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReyurnGETCommand_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[253]"></a>Set_Clean_Total_Consumption</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Set_Clean_Total_Consumption &rArr; Send_ReyurnGETCommand_Value &rArr; ReyurnCommand_Send &rArr; Write_SOCK_Data_Buffer &rArr; Read_W5500_SOCK_2Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteConsumption_All_Money
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReyurnGETCommand_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[254]"></a>Get_GPS_Information</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Get_GPS_Information &rArr; Send_ReyurnGETCommand_Value &rArr; ReyurnCommand_Send &rArr; Write_SOCK_Data_Buffer &rArr; Read_W5500_SOCK_2Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReyurnGETCommand_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[255]"></a>AutoUP_GPS_Information</STRONG> (Thumb, 274 bytes, Stack size 16 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AutoUP_GPS_Information &rArr; EC20_SendString
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrCPY
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EC20_SendString
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetXOR
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[256]"></a>Get_IMEI_IMSI_Machno</STRONG> (Thumb, 54 bytes, Stack size 48 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Get_IMEI_IMSI_Machno &rArr; Send_ReyurnGETCommand_Value &rArr; ReyurnCommand_Send &rArr; Write_SOCK_Data_Buffer &rArr; Read_W5500_SOCK_2Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReyurnGETCommand_Value
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[257]"></a>Set_IAP_Start_Update</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Set_IAP_Start_Update &rArr; Send_ReyurnGETCommand_Value &rArr; ReyurnCommand_Send &rArr; Write_SOCK_Data_Buffer &rArr; Read_W5500_SOCK_2Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;False_Random_number
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_IAP_Start_Updata
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReyurnGETCommand_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[25a]"></a>Set_Handle_IAP_Data</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Set_Handle_IAP_Data &rArr; Handle_IAP_Data &rArr; iap_write_appbin &rArr; STMFLASH_Write &rArr; STMFLASH_Write_NoCheck &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrCPY
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IAP_Data
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReyurnGETCommand_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[25c]"></a>Set_Check_IAP_END_Updata</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Set_Check_IAP_END_Updata &rArr; Send_ReyurnGETCommand_Value &rArr; ReyurnCommand_Send &rArr; Write_SOCK_Data_Buffer &rArr; Read_W5500_SOCK_2Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_IAP_END_Updata
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReyurnGETCommand_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[25e]"></a>Get_IAP_Read_Data</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Get_IAP_Read_Data &rArr; ReyurnCommand_Send &rArr; Write_SOCK_Data_Buffer &rArr; Read_W5500_SOCK_2Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Read
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrCPY
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReyurnCommand_Send
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetXOR
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[25f]"></a>Set_IAP_Updata_OK</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Set_IAP_Updata_OK &rArr; IAP_OK_System_Boot &rArr; iap_write_appbin &rArr; STMFLASH_Write &rArr; STMFLASH_Write_NoCheck &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftReset
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_OK_System_Boot
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReyurnGETCommand_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[d0]"></a>InitCombuff</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = InitCombuff
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRS485
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystemParameter
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[262]"></a>Process_com_data</STRONG> (Thumb, 992 bytes, Stack size 8 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = Process_com_data &rArr; Set_Open_Door &rArr; SYN6288_Send &rArr; SPEAKUART_SendString &rArr; MUSART1_SendData &rArr; TX_H
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveOperation_CommCount
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arrange_Record
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRecord
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_IAP_Updata_OK
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_IAP_Read_Data
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Check_IAP_END_Updata
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Handle_IAP_Data
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_IAP_Start_Update
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_IMEI_IMSI_Machno
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoUP_GPS_Information
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_GPS_Information
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Clean_Total_Consumption
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Total_Consumption
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Query_Balance_Return
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Carte_Consum_Money
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Carte_Consum_Money
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Fixed_consumption_Money
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Fixed_consumption_Money
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Fixed_consumption_Timer
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Fixed_consumption_Timer
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Machine_Category
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Machine_Category
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Sub_Maximum_Limit
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Sub_Maximum_Limit
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_GQ
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Holiday_Vacations
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Holiday_Vacations
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Passage_Time
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Passage_Time
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Passage_Time_Enable
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Permission_Period
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Permission_Period
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Extvar
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Check_Sector_Password_Mode
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_ReadorWriteICData_Mode
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Interval_delay
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearRecord
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_MaxRecord
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRecord_Address
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMaxRecordCount
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelOneBackGroupName
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddOneBackGroupName
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBackName
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBackGroupName
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBackGroupName
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelOneWhiteGroupName
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddOneWhiteGroupName
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearWhiteName
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWhiteGroupName
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWhiteGroupName
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBackWhiteNamesize
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heartbeat_Return
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Heartbeat_Send
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataRecordTEST
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearUpdataRecord
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUpdata_MaxRecord
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUpdataRecordCount
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Realtime_Upload_Return
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Realtime_Upload_Record
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_NO_Open_Door
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Open_Door
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_TCP4G_Remote_IP
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_TCP4G_Remote_IP
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_TCP_Remote_IP
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_TCP_Remote_IP
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_TCP_Local_IP
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_TCP_Local_IP
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_This_MAC
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_This_MAC
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ChipInfo_Com
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_ResNottore_factory
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Restore_factory
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_sysvar
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_list_enabled
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Output_delay
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Clock_delay
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSectionAndPassword
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSectionAndPassword
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTime
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTime
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMachno
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMachno
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVersion
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMachType
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRS485
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process4G_Commu
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessTCPServer
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessTCPClient
</UL>

<P><STRONG><a name="[ed]"></a>ProcessRS485</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, comcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ProcessRS485 &rArr; Process_com_data &rArr; Set_Open_Door &rArr; SYN6288_Send &rArr; SPEAKUART_SendString &rArr; MUSART1_SendData &rArr; TX_H
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCombuff
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;separate_value_2_1
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetXOR
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrEQ
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[21e]"></a>SaveGroupCount</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, name.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SaveGroupCount &rArr; AT24CXX_2_Write &rArr; IIC_2_Wait_Ack &rArr; IIC_2_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_2_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelCardno
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCardno
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWhiteGroupName
</UL>

<P><STRONG><a name="[21c]"></a>GetGroupCount</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, name.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GetGroupCount &rArr; AT24CXX_2_Read &rArr; AT24CXX_2_ReadOneByte &rArr; IIC_2_Read_Byte &rArr; IIC_2_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_2_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeGroup
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWhiteGroupName
</UL>

<P><STRONG><a name="[220]"></a>SaveCommCount</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, name.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SaveCommCount &rArr; AT24CXX_2_Write &rArr; IIC_2_Wait_Ack &rArr; IIC_2_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_2_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAllCardno
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelCardno
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommFindCardno
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCardno
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWhiteGroupName
</UL>

<P><STRONG><a name="[21f]"></a>GetCommCount</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, name.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GetCommCount &rArr; AT24CXX_2_Read &rArr; AT24CXX_2_ReadOneByte &rArr; IIC_2_Read_Byte &rArr; IIC_2_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_2_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitName
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWhiteGroupName
</UL>

<P><STRONG><a name="[21d]"></a>GetGroupAddress</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, name.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindCardno
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelCardno
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCardno
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWhiteGroupName
</UL>

<P><STRONG><a name="[ce]"></a>InitName</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, name.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = InitName &rArr; GetCommCount &rArr; AT24CXX_2_Read &rArr; AT24CXX_2_ReadOneByte &rArr; IIC_2_Read_Byte &rArr; IIC_2_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCommCount
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystemParameter
</UL>

<P><STRONG><a name="[268]"></a>MakeGroup</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, name.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MakeGroup &rArr; GetGroupCount &rArr; AT24CXX_2_Read &rArr; AT24CXX_2_ReadOneByte &rArr; IIC_2_Read_Byte &rArr; IIC_2_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGroupCount
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSum
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindCardno
</UL>

<P><STRONG><a name="[1ae]"></a>FindCardno</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, name.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = FindCardno &rArr; MakeGroup &rArr; GetGroupCount &rArr; AT24CXX_2_Read &rArr; AT24CXX_2_ReadOneByte &rArr; IIC_2_Read_Byte &rArr; IIC_2_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrCPY
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_2_Read
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeGroup
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGroupAddress
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrEQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IC_test
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WP_ProcessCard
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Card_Limit
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelOneCardno
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddOneCardno
</UL>

<P><STRONG><a name="[269]"></a>AddCardno</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, name.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AddCardno &rArr; AT24CXX_2_Write1 &rArr; AT24CXX_2_WriteOneByte &rArr; IIC_2_Wait_Ack &rArr; IIC_2_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_2_Write1
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveGroupCount
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveCommCount
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGroupAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddOneCardno
</UL>

<P><STRONG><a name="[26a]"></a>CommFindCardno</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, name.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CommFindCardno &rArr; AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_2_Write1
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveCommCount
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSum
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelCardno
</UL>

<P><STRONG><a name="[26b]"></a>DelCardno</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, name.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DelCardno &rArr; CommFindCardno &rArr; AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_2_Write1
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_2_Read
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommFindCardno
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveGroupCount
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveCommCount
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGroupAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelOneCardno
</UL>

<P><STRONG><a name="[26c]"></a>DelAllCardno</STRONG> (Thumb, 46 bytes, Stack size 80 bytes, name.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_2_Write
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveCommCount
</UL>

<P><STRONG><a name="[226]"></a>DelOneCardno</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, name.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = DelOneCardno &rArr; DelCardno &rArr; CommFindCardno &rArr; AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindCardno
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrCPY
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelCardno
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelOneWhiteGroupName
</UL>

<P><STRONG><a name="[224]"></a>AddOneCardno</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, name.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = AddOneCardno &rArr; FindCardno &rArr; MakeGroup &rArr; GetGroupCount &rArr; AT24CXX_2_Read &rArr; AT24CXX_2_ReadOneByte &rArr; IIC_2_Read_Byte &rArr; IIC_2_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindCardno
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrCPY
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCardno
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddOneWhiteGroupName
</UL>

<P><STRONG><a name="[26d]"></a>ProcessCard</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, cardprocess.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ProcessCard &rArr; SYN6288_Send &rArr; SPEAKUART_SendString &rArr; MUSART1_SendData &rArr; TX_H
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1302_Read_Time
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYN6288_Send
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newCheck_Card_Limit
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UPloadRecord
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arrange_Record
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrEQ
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeginOutput2
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeginOutput1
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Wisdom_plate
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wisdom_plate_Consumption
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckCard
</UL>

<P><STRONG><a name="[270]"></a>ReadSectionData</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, cardprocess.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ReadSectionData &rArr; PcdAuthState &rArr; PcdComMF522 &rArr; ClearBitMask &rArr; WriteRawRC &rArr; SPI_RC522_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRead
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAuthState
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrCPY
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPassword
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindICCard
</UL>

<P><STRONG><a name="[272]"></a>FindICCard</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, cardprocess.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = FindICCard &rArr; ReadSectionData &rArr; PcdAuthState &rArr; PcdComMF522 &rArr; ClearBitMask &rArr; WriteRawRC &rArr; SPI_RC522_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelect
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRequest
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAnticoll
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrCPY
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSectionData
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WP_CheckCard
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckCard
</UL>

<P><STRONG><a name="[273]"></a>CheckCard</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, cardprocess.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessWG1
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessWG2
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessQR_Commu
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindICCard
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCard
</UL>

<P><STRONG><a name="[275]"></a>WP_CheckCard</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, cardprocess.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = WP_CheckCard &rArr; ProcessQR_Commu &rArr; SYN6288_Send &rArr; SPEAKUART_SendString &rArr; MUSART1_SendData &rArr; TX_H
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessWG1
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrCPY
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessWG2
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessQR_Commu
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindICCard
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAEI_IC_Conversion
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrEQ
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Wisdom_plate
</UL>

<P><STRONG><a name="[276]"></a>Check_Card_Limit</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, cardprocess.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Check_Card_Limit &rArr; FindCardno &rArr; MakeGroup &rArr; GetGroupCount &rArr; AT24CXX_2_Read &rArr; AT24CXX_2_ReadOneByte &rArr; IIC_2_Read_Byte &rArr; IIC_2_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindCardno
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_FindCardno
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrCMP
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessReal_time_upload
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newCheck_Card_Limit
</UL>

<P><STRONG><a name="[279]"></a>WP_ProcessCard</STRONG> (Thumb, 252 bytes, Stack size 16 bytes, cardprocess.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindCardno
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_interval_fun
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Interval_Detection
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessICCard
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Holiday_Detection
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HolidayTime_Interval_Detection
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_FindCardno
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyzeSectionData
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeginOutput1
</UL>

<P><STRONG><a name="[3e6]"></a>ProcessSettingByCard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cardprocess.o(.text), UNUSED)

<P><STRONG><a name="[cd]"></a>InitPassword</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, pass.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = InitPassword &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystemParameter
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPassword
</UL>

<P><STRONG><a name="[1f1]"></a>SetPassword</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, pass.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SetPassword &rArr; InitPassword &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPassword
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSectionAndPassword
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadDefaultValue
</UL>

<P><STRONG><a name="[271]"></a>GetPassword</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pass.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetPassword &rArr; MyStrCPY
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrCPY
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSectionData
</UL>

<P><STRONG><a name="[280]"></a>GetIsectiond</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pass.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrCPY
</UL>

<P><STRONG><a name="[1fb]"></a>LoadnEC20DefaultValue</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, default.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LoadnEC20DefaultValue &rArr; AT24CXX_Write &rArr; IIC_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_EC20_Remote_IP
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_ResNottore_factory
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadDefaultValue
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun14
</UL>

<P><STRONG><a name="[1d2]"></a>LoadDefaultValue</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, default.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LoadDefaultValue &rArr; SetPassword &rArr; InitPassword &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPassword
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadnEC20DefaultValue
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckInit
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Restore_factory
</UL>

<P><STRONG><a name="[1fa]"></a>LoadnNetDefaultValue</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, default.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LoadnNetDefaultValue &rArr; AT24CXX_Write &rArr; IIC_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reboot
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_ResNottore_factory
</UL>

<P><STRONG><a name="[cf]"></a>Initnewdate_addr</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, default.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Initnewdate_addr &rArr; AT24CXX_Write &rArr; IIC_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystemParameter
</UL>

<P><STRONG><a name="[cb]"></a>InitRecord</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, record.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = InitRecord &rArr; AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystemParameter
</UL>

<P><STRONG><a name="[281]"></a>SaveRecordCount</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, record.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SaveRecordCount &rArr; AT24CXX_Write &rArr; IIC_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelRecord
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRecord
</UL>

<P><STRONG><a name="[db]"></a>InitActual_CardCount</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, record.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = InitActual_CardCount &rArr; AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystemParameter
</UL>

<P><STRONG><a name="[da]"></a>InitOperation_CommCount</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, record.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = InitOperation_CommCount &rArr; AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystemParameter
</UL>

<P><STRONG><a name="[dc]"></a>InitErr_CardCount</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, record.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = InitErr_CardCount &rArr; AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystemParameter
</UL>

<P><STRONG><a name="[282]"></a>SaveActual_CardCount</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, record.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SaveActual_CardCount &rArr; AT24CXX_Write &rArr; IIC_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessReal_time_upload
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newCheck_Card_Limit
</UL>

<P><STRONG><a name="[283]"></a>SaveErr_CardCount</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, record.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SaveErr_CardCount &rArr; AT24CXX_Write &rArr; IIC_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessReal_time_upload
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newCheck_Card_Limit
</UL>

<P><STRONG><a name="[266]"></a>SaveOperation_CommCount</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, record.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SaveOperation_CommCount &rArr; AT24CXX_Write &rArr; IIC_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[237]"></a>SaveRecordcount_Err</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, record.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SaveRecordcount_Err &rArr; AT24CXX_Write &rArr; IIC_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRecordcount_Err
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRecord
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearRecord
</UL>

<P><STRONG><a name="[e2]"></a>InitRecordcount_Err</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, record.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = InitRecordcount_Err &rArr; AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveRecordcount_Err
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystemParameter
</UL>

<P><STRONG><a name="[284]"></a>DelRecord</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, record.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DelRecord &rArr; SaveRecordCount &rArr; AT24CXX_Write &rArr; IIC_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Erase_Sector
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveRecordCount
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun24
</UL>

<P><STRONG><a name="[d6]"></a>Init_UpdataRecord</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, record.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Init_UpdataRecord &rArr; AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystemParameter
</UL>

<P><STRONG><a name="[285]"></a>Save_UpdataRecordCount</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, record.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Save_UpdataRecordCount &rArr; AT24CXX_Write &rArr; IIC_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_UpdataRecord
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Del_UpdataRecord
</UL>

<P><STRONG><a name="[213]"></a>Del_UpdataRecord</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, record.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Del_UpdataRecord &rArr; Save_UpdataRecordCount &rArr; AT24CXX_Write &rArr; IIC_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_UpdataRecordCount
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_UpdataRecord
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearUpdataRecord
</UL>

<P><STRONG><a name="[264]"></a>Arrange_Record</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, record.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Arrange_Record &rArr; getDectoBCD
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDectoBCD
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrCPY
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_4_data
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCard
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[286]"></a>Add_UpdataRecord</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, record.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Add_UpdataRecord &rArr; SPI_Flash_Write &rArr; SPI_Flash_Write_NoCheck &rArr; SPI_Flash_Write_Page &rArr; SPI_Flash_Wait_Busy &rArr; SPI_Flash_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Write
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_UpdataRecordCount
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Del_UpdataRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessReal_time_upload
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newCheck_Card_Limit
</UL>

<P><STRONG><a name="[265]"></a>AddRecord</STRONG> (Thumb, 330 bytes, Stack size 56 bytes, record.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = AddRecord &rArr; SPI_Flash_Write &rArr; SPI_Flash_Write_NoCheck &rArr; SPI_Flash_Write_Page &rArr; SPI_Flash_Wait_Busy &rArr; SPI_Flash_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Write
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Read
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrCPY
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveConsumption_All_Money
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveRecordCount
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveRecordcount_Err
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrEQ
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBCDtoDec
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessReal_time_upload
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newCheck_Card_Limit
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
</UL>

<P><STRONG><a name="[26e]"></a>UPloadRecord</STRONG> (Thumb, 72 bytes, Stack size 64 bytes, record.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UPloadRecord &rArr; EC20_SendString
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrCPY
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EC20_SendString
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetXOR
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newCheck_Card_Limit
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCard
</UL>

<P><STRONG><a name="[288]"></a>DelUPloadRecord</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, record.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = DelUPloadRecord &rArr; MyStrEQ
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrCPY
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrEQ
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessReal_time_upload
</UL>

<P><STRONG><a name="[cc]"></a>InitMachno</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mach.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = InitMachno &rArr; AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexToStr
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystemParameter
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveMachno
</UL>

<P><STRONG><a name="[1ec]"></a>SaveMachno</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, mach.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SaveMachno &rArr; InitMachno &rArr; AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMachno
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMachno
</UL>

<P><STRONG><a name="[289]"></a>gettimetobcd</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, cardrw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HextoBCD
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_interval_fun
</UL>

<P><STRONG><a name="[28b]"></a>Set_Time_slot_1</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, cardrw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrCMP
</UL>

<P><STRONG><a name="[27e]"></a>Time_interval_fun</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, cardrw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettimetobcd
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HextoBCD
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WP_ProcessCard
</UL>

<P><STRONG><a name="[28c]"></a>Debit_fun</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, cardrw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDectoBCD
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrCPY
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetXOR
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBCDtoDec
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessICCard
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyzeSectionData
</UL>

<P><STRONG><a name="[27d]"></a>AnalyzeSectionData</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, cardrw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrCPY
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexToStr
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debit_fun
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WP_ProcessCard
</UL>

<P><STRONG><a name="[28d]"></a>BlockWrite</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, cardrw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdWrite
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAuthState
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBlock1
</UL>

<P><STRONG><a name="[28e]"></a>WriteBlock1</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, cardrw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrCPY
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessICCard
</UL>

<P><STRONG><a name="[27f]"></a>ProcessICCard</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cardrw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBlock1
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debit_fun
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WP_ProcessCard
</UL>

<P><STRONG><a name="[22a]"></a>Back_SaveGroupCount</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, blackname.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Back_SaveGroupCount &rArr; AT24CXX_Write &rArr; IIC_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_DelCardno
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_AddCardno
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBackGroupName
</UL>

<P><STRONG><a name="[228]"></a>Back_GetGroupCount</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, blackname.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Back_GetGroupCount &rArr; AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_MakeGroup
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBackGroupName
</UL>

<P><STRONG><a name="[22c]"></a>Back_SaveCommCount</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, blackname.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Back_SaveCommCount &rArr; AT24CXX_Write &rArr; IIC_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_DelAllCardno
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_DelCardno
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_CommFindCardno
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_AddCardno
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBackGroupName
</UL>

<P><STRONG><a name="[22b]"></a>Back_GetCommCount</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, blackname.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Back_GetCommCount &rArr; AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_InitName
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBackGroupName
</UL>

<P><STRONG><a name="[229]"></a>Back_GetGroupAddress</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, blackname.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_DelCardno
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_AddCardno
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_FindCardno
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBackGroupName
</UL>

<P><STRONG><a name="[28f]"></a>Back_InitName</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, blackname.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_GetCommCount
</UL>

<P><STRONG><a name="[290]"></a>Back_MakeGroup</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, blackname.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Back_MakeGroup &rArr; Back_GetGroupCount &rArr; AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_GetGroupCount
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSum
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_FindCardno
</UL>

<P><STRONG><a name="[277]"></a>Back_FindCardno</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, blackname.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Back_FindCardno &rArr; Back_MakeGroup &rArr; Back_GetGroupCount &rArr; AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_MakeGroup
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_GetGroupAddress
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrEQ
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WP_ProcessCard
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Card_Limit
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_DelOneCardno
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_AddOneCardno
</UL>

<P><STRONG><a name="[291]"></a>Back_AddCardno</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, blackname.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Back_AddCardno &rArr; Back_SaveGroupCount &rArr; AT24CXX_Write &rArr; IIC_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_SaveGroupCount
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_SaveCommCount
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_GetGroupAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_AddOneCardno
</UL>

<P><STRONG><a name="[230]"></a>Back_AddOneCardno</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, blackname.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Back_AddOneCardno &rArr; Back_FindCardno &rArr; Back_MakeGroup &rArr; Back_GetGroupCount &rArr; AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrCPY
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_AddCardno
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_FindCardno
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddOneBackGroupName
</UL>

<P><STRONG><a name="[292]"></a>Back_CommFindCardno</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, blackname.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Back_CommFindCardno &rArr; AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_SaveCommCount
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSum
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_DelCardno
</UL>

<P><STRONG><a name="[293]"></a>Back_DelCardno</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, blackname.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Back_DelCardno &rArr; Back_CommFindCardno &rArr; AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_CommFindCardno
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_SaveGroupCount
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_SaveCommCount
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_GetGroupAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_DelOneCardno
</UL>

<P><STRONG><a name="[294]"></a>Back_DelAllCardno</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, blackname.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_SaveCommCount
</UL>

<P><STRONG><a name="[232]"></a>Back_DelOneCardno</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, blackname.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Back_DelOneCardno &rArr; Back_DelCardno &rArr; Back_CommFindCardno &rArr; AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrCPY
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_DelCardno
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_FindCardno
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelOneBackGroupName
</UL>

<P><STRONG><a name="[27c]"></a>Time_Interval_Detection</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, interval.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrCMP
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WP_ProcessCard
</UL>

<P><STRONG><a name="[295]"></a>Check_Passage_Enable</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, interval.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrCMP
</UL>

<P><STRONG><a name="[296]"></a>Channel_Time_Detection</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, interval.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrCMP
</UL>

<P><STRONG><a name="[27a]"></a>Holiday_Detection</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, interval.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrCMP
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WP_ProcessCard
</UL>

<P><STRONG><a name="[27b]"></a>HolidayTime_Interval_Detection</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, interval.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrCMP
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WP_ProcessCard
</UL>

<P><STRONG><a name="[d1]"></a>InitTime_Interval_Detection</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, interval.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = InitTime_Interval_Detection &rArr; AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystemParameter
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Permission_Period
</UL>

<P><STRONG><a name="[d2]"></a>InitPassage_Time</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, interval.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = InitPassage_Time &rArr; AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystemParameter
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Passage_Time
</UL>

<P><STRONG><a name="[d3]"></a>InitPassage_TimeEnable</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, interval.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = InitPassage_TimeEnable &rArr; AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystemParameter
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Passage_Time_Enable
</UL>

<P><STRONG><a name="[d4]"></a>InitHoliday_Vacations</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, interval.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = InitHoliday_Vacations &rArr; AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystemParameter
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Holiday_Vacations
</UL>

<P><STRONG><a name="[297]"></a>get4g_rebuff</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ec20fun.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process4G_Commu
</UL>

<P><STRONG><a name="[ee]"></a>Process4G_Commu</STRONG> (Thumb, 250 bytes, Stack size 16 bytes, ec20fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = Process4G_Commu &rArr; Process_com_data &rArr; Set_Open_Door &rArr; SYN6288_Send &rArr; SPEAKUART_SendString &rArr; MUSART1_SendData &rArr; TX_H
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitEC20Combuff
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get4g_rebuff
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;separate_value_2_1
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetXOR
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrEQ
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d8]"></a>Init_EC20_Remote_IP</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, ec20fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Init_EC20_Remote_IP &rArr; LoadnEC20DefaultValue &rArr; AT24CXX_Write &rArr; IIC_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrCPY
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadnEC20DefaultValue
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystemParameter
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_TCP4G_Remote_IP
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun14
</UL>

<P><STRONG><a name="[29e]"></a>getQR_rebuff</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, qr_code.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessQR_Commu
</UL>

<P><STRONG><a name="[299]"></a>QR_SendString</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, qr_code.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>

<P><STRONG><a name="[29a]"></a>QR_SendByte</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, qr_code.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>

<P><STRONG><a name="[29b]"></a>cleanQR_bcrebuff</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, qr_code.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitQRCombuff
</UL>

<P><STRONG><a name="[17f]"></a>InitQRCombuff</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, qr_code.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = InitQRCombuff
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanQR_bcrebuff
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessQR_Commu
</UL>

<P><STRONG><a name="[29c]"></a>ProcessQR_ICRead</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, qr_code.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ProcessQR_ICRead &rArr; StrToHex &rArr; toupper &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToHex
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessQR_Commu
</UL>

<P><STRONG><a name="[29d]"></a>ProcessQR_QRRead</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, qr_code.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ProcessQR_QRRead &rArr; StrToHex &rArr; toupper &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToHex
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetXOR
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrEQ
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessQR_Commu
</UL>

<P><STRONG><a name="[274]"></a>ProcessQR_Commu</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, qr_code.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ProcessQR_Commu &rArr; SYN6288_Send &rArr; SPEAKUART_SendString &rArr; MUSART1_SendData &rArr; TX_H
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitQRCombuff
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYN6288_Send
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessQR_QRRead
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessQR_ICRead
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getQR_rebuff
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WP_CheckCard
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckCard
</UL>

<P><STRONG><a name="[29f]"></a>TX_L</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, speak.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TX_L
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MUSART1_SendData
</UL>

<P><STRONG><a name="[2a0]"></a>TX_H</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, speak.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TX_H
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MUSART1_SendData
</UL>

<P><STRONG><a name="[bd]"></a>SPEAK_USART_TX_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, speak.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPEAK_USART_TX_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystemHardware
</UL>

<P><STRONG><a name="[2a1]"></a>MUSART1_SendData</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, speak.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MUSART1_SendData &rArr; TX_H
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_H
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_L
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPEAKUART_SendString
</UL>

<P><STRONG><a name="[2a2]"></a>SPEAKUART_SendString</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, speak.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPEAKUART_SendString &rArr; MUSART1_SendData &rArr; TX_H
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MUSART1_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYN6288_Send
</UL>

<P><STRONG><a name="[16e]"></a>SYN6288_Send</STRONG> (Thumb, 86 bytes, Stack size 224 bytes, speak.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = SYN6288_Send &rArr; SPEAKUART_SendString &rArr; MUSART1_SendData &rArr; TX_H
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPEAKUART_SendString
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetXOR
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_key_set
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_Volume
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD12864_ShowPlay_Card
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessQR_Commu
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCard
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Open_Door
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessKEYCMD
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun84
</UL>

<P><STRONG><a name="[2a3]"></a>SC50X0_SDA</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, speak.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[d7]"></a>Init_Heartbeat</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, heartbeat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystemParameter
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heartbeat_Return
</UL>

<P><STRONG><a name="[eb]"></a>Heartbeat_Send</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, heartbeat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Heartbeat_Send &rArr; EC20_SendString
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrCPY
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EC20_SendString
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetXOR
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Heartbeat_Send
</UL>

<P><STRONG><a name="[2a4]"></a>Lcds_Config</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lcd12864.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[2a7]"></a>Delaynms</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lcd12864.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Img
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Number
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_String_NUM
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_String
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Init
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Char
</UL>

<P><STRONG><a name="[2a6]"></a>Send_Byte</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, lcd12864.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Char
</UL>

<P><STRONG><a name="[2a5]"></a>Write_Char</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, lcd12864.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Byte
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delaynms
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Img
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Number
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_String_NUM
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_String
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Set_XY
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_Scr
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Init
</UL>

<P><STRONG><a name="[2a8]"></a>Lcd_Init</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, lcd12864.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Char
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delaynms
</UL>

<P><STRONG><a name="[2a9]"></a>Clr_Scr</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, lcd12864.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Char
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD12864_ShowPlay_Card
</UL>

<P><STRONG><a name="[2aa]"></a>LCD_Set_XY</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lcd12864.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Char
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_String_NUM
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_String
</UL>

<P><STRONG><a name="[2ab]"></a>LCD_Write_String</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lcd12864.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Set_XY
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Char
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delaynms
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD12864_Show_NoNet
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD12864_Show_Consump_Pattern
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD12864_ShowPlay_Card
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD12864_ShowKeyValue
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD12864_Standby
</UL>

<P><STRONG><a name="[2ac]"></a>LCD_Write_String_NUM</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, lcd12864.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Set_XY
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Char
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delaynms
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD12864_Show_NoNet
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD12864_Show_Consump_Pattern
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD12864_ShowPlay_Card
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD12864_ShowKeyValue
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD12864_Standby
</UL>

<P><STRONG><a name="[2ad]"></a>LCD_Write_Number</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lcd12864.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Char
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delaynms
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD12864_Show_Consump_Pattern
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD12864_ShowPlay_Card
</UL>

<P><STRONG><a name="[2ae]"></a>Display_Img</STRONG> (Thumb, 280 bytes, Stack size 16 bytes, lcd12864.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Char
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delaynms
</UL>

<P><STRONG><a name="[3e7]"></a>Delay_Lcd</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lcd12864.o(.text), UNUSED)

<P><STRONG><a name="[1dc]"></a>Clear_Standby_Display</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcd12864_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD12864_Show_NoNet
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD12864_ShowPlay_Card
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckKEY
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowKeyValue_Plus
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Show_Consump_Pattern
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowKeyValue
</UL>

<P><STRONG><a name="[1d1]"></a>Clear_Standby_Display_Time</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, lcd12864_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyzeWorkStatus
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowPlay_Card
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Query_Balance_Return
</UL>

<P><STRONG><a name="[3e8]"></a>EndClear_Pay_Card_Data</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd12864_config.o(.text), UNUSED)

<P><STRONG><a name="[2af]"></a>LCD12864_Standby</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, lcd12864_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1302_Read_Time
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexToStr
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_String_NUM
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_String
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[2b0]"></a>LCD12864_ShowKeyValue</STRONG> (Thumb, 176 bytes, Stack size 96 bytes, lcd12864_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexToStr
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_String_NUM
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_String
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[2b1]"></a>LCD12864_ShowPlay_Card</STRONG> (Thumb, 1088 bytes, Stack size 40 bytes, lcd12864_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYN6288_Send
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrCPY
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Number
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_String_NUM
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_String
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_Scr
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Standby_Display
</UL>

<P><STRONG><a name="[2b2]"></a>LCD12864_Show_Consump_Pattern</STRONG> (Thumb, 202 bytes, Stack size 8 bytes, lcd12864_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexToStr
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Number
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_String_NUM
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_String
</UL>

<P><STRONG><a name="[2b3]"></a>LCD12864_Show_NoNet</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, lcd12864_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_String_NUM
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_String
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Standby_Display
</UL>

<P><STRONG><a name="[f1]"></a>ProcessReal_time_upload</STRONG> (Thumb, 456 bytes, Stack size 8 bytes, upload.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ProcessReal_time_upload &rArr; AddRecord &rArr; SPI_Flash_Write &rArr; SPI_Flash_Write_NoCheck &rArr; SPI_Flash_Write_Page &rArr; SPI_Flash_Wait_Busy &rArr; SPI_Flash_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrCPY
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wisdom_plate_Return
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowPlay_Card
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelUPloadRecord
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_UpdataRecord
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveErr_CardCount
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveActual_CardCount
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Card_Limit
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRecord
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UndoPressKEY
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWorkStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[26f]"></a>newCheck_Card_Limit</STRONG> (Thumb, 254 bytes, Stack size 8 bytes, upload.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = newCheck_Card_Limit &rArr; AddRecord &rArr; SPI_Flash_Write &rArr; SPI_Flash_Write_NoCheck &rArr; SPI_Flash_Write_Page &rArr; SPI_Flash_Wait_Busy &rArr; SPI_Flash_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrCPY
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wisdom_plate_Return
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowPlay_Card
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_UpdataRecord
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveErr_CardCount
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveActual_CardCount
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UPloadRecord
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Card_Limit
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCard
</UL>

<P><STRONG><a name="[3e9]"></a>dtmelay</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tm1650.o(.text), UNUSED)

<P><STRONG><a name="[2b6]"></a>TM16_SDA_IN</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tm1650.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TM16_SDA_IN &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM16_Read_Byte
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM16_Read_ACK
</UL>

<P><STRONG><a name="[2b7]"></a>TM16_SDA_OUT</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tm1650.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TM16_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM16_Read_Byte
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM16_Send_ACK
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM16_Read_ACK
</UL>

<P><STRONG><a name="[2b8]"></a>TM16_IIC_Start</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, tm1650.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TM16_IIC_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_FD650_READ
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM16_Write_REG
</UL>

<P><STRONG><a name="[2b9]"></a>TM16_IIC_Stop</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, tm1650.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TM16_IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_FD650_READ
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM16_Write_REG
</UL>

<P><STRONG><a name="[2ba]"></a>TM16_Read_ACK</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, tm1650.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TM16_Read_ACK &rArr; TM16_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM16_SDA_OUT
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM16_SDA_IN
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM16_Send_Byte
</UL>

<P><STRONG><a name="[2bb]"></a>TM16_Send_ACK</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, tm1650.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM16_SDA_OUT
</UL>

<P><STRONG><a name="[2bc]"></a>TM16_Send_Byte</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, tm1650.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TM16_Send_Byte &rArr; TM16_Read_ACK &rArr; TM16_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM16_Read_ACK
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_FD650_READ
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM16_Write_REG
</UL>

<P><STRONG><a name="[2bd]"></a>TM16_Read_Byte</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, tm1650.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TM16_Read_Byte &rArr; TM16_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM16_SDA_OUT
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM16_SDA_IN
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_FD650_READ
</UL>

<P><STRONG><a name="[2be]"></a>TM16_Write_REG</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tm1650.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TM16_Write_REG &rArr; TM16_Send_Byte &rArr; TM16_Read_ACK &rArr; TM16_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM16_Send_Byte
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM16_IIC_Stop
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM16_IIC_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM16_Set_Brig
</UL>

<P><STRONG><a name="[2bf]"></a>TM16_Set_Brig</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, tm1650.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TM16_Set_Brig &rArr; TM16_Write_REG &rArr; TM16_Send_Byte &rArr; TM16_Read_ACK &rArr; TM16_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM16_Write_REG
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM16_INIT
</UL>

<P><STRONG><a name="[bc]"></a>TM16_INIT</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tm1650.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = TM16_INIT &rArr; TM16_Set_Brig &rArr; TM16_Write_REG &rArr; TM16_Send_Byte &rArr; TM16_Read_ACK &rArr; TM16_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM16_Set_Brig
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystemHardware
</UL>

<P><STRONG><a name="[2c0]"></a>TM1650_FD650_READ</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tm1650.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TM1650_FD650_READ &rArr; TM16_Send_Byte &rArr; TM16_Read_ACK &rArr; TM16_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM16_Read_Byte
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM16_Send_Byte
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM16_IIC_Stop
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM16_IIC_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmKeyscan
</UL>

<P><STRONG><a name="[2c1]"></a>tmKeyscan</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, tm1650.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = tmKeyscan &rArr; TM1650_FD650_READ &rArr; TM16_Send_Byte &rArr; TM16_Read_ACK &rArr; TM16_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrCPY
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_FD650_READ
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrEQ
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_key_set
</UL>

<P><STRONG><a name="[2c2]"></a>WP_SendString</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, wisdom_plate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WP_SendString
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wisdom_plate_Return
</UL>

<P><STRONG><a name="[2c3]"></a>WP_SendByte</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wisdom_plate.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>

<P><STRONG><a name="[180]"></a>InitWPCombuff</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wisdom_plate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Wisdom_plate
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[2b4]"></a>Wisdom_plate_Return</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, wisdom_plate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Wisdom_plate_Return &rArr; WP_SendString
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrCPY
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WP_SendString
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSum
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessReal_time_upload
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wisdom_plate_Transaction_Confirmation
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wisdom_plate_Card_Read
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newCheck_Card_Limit
</UL>

<P><STRONG><a name="[2c4]"></a>Wisdom_plate_Card_Read</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, wisdom_plate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Wisdom_plate_Card_Read &rArr; Wisdom_plate_Return &rArr; WP_SendString
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrCPY
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wisdom_plate_Return
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Wisdom_plate
</UL>

<P><STRONG><a name="[2c5]"></a>Wisdom_plate_Consumption</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, wisdom_plate.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCard
</UL>

<P><STRONG><a name="[2c6]"></a>Wisdom_plate_Transaction_Confirmation</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wisdom_plate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Wisdom_plate_Transaction_Confirmation &rArr; Wisdom_plate_Return &rArr; WP_SendString
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wisdom_plate_Return
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Wisdom_plate
</UL>

<P><STRONG><a name="[f0]"></a>Process_Wisdom_plate</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, wisdom_plate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = Process_Wisdom_plate &rArr; WP_CheckCard &rArr; ProcessQR_Commu &rArr; SYN6288_Send &rArr; SPEAKUART_SendString &rArr; MUSART1_SendData &rArr; TX_H
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitWPCombuff
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrCPY
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wisdom_plate_Transaction_Confirmation
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wisdom_plate_Card_Read
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WP_CheckCard
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCard
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSum
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrEQ
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[249]"></a>SaveMachine_Category</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, consum_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SaveMachine_Category &rArr; AT24CXX_Write &rArr; IIC_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Machine_Category
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun29
</UL>

<P><STRONG><a name="[2c7]"></a>SaveFixed_consumption_Money</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, consum_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SaveFixed_consumption_Money &rArr; AT24CXX_Write &rArr; IIC_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun29
</UL>

<P><STRONG><a name="[2c8]"></a>SaveFixed_consumption_Timer</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, consum_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SaveFixed_consumption_Timer &rArr; AT24CXX_Write &rArr; IIC_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun29
</UL>

<P><STRONG><a name="[dd]"></a>InitFixed_consumption_Money</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, consum_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = InitFixed_consumption_Money &rArr; AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystemParameter
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Fixed_consumption_Money
</UL>

<P><STRONG><a name="[df]"></a>InitConsumption_All_Money</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, consum_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = InitConsumption_All_Money &rArr; AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystemParameter
</UL>

<P><STRONG><a name="[287]"></a>SaveConsumption_All_Money</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, consum_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SaveConsumption_All_Money &rArr; AT24CXX_Write &rArr; IIC_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRecord
</UL>

<P><STRONG><a name="[238]"></a>DeleteConsumption_All_Money</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, consum_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DeleteConsumption_All_Money &rArr; AT24CXX_Write &rArr; IIC_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Clean_Total_Consumption
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearRecord
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun24
</UL>

<P><STRONG><a name="[de]"></a>InitFixed_consumption_Timer</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, consum_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = InitFixed_consumption_Timer &rArr; AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystemParameter
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Fixed_consumption_Timer
</UL>

<P><STRONG><a name="[2c9]"></a>SaveCarte_consum_Money</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, consum_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SaveCarte_consum_Money &rArr; AT24CXX_Write &rArr; IIC_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun29
</UL>

<P><STRONG><a name="[e0]"></a>InitCarte_consum_Money</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, consum_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = InitCarte_consum_Money &rArr; AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystemParameter
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Carte_Consum_Money
</UL>

<P><STRONG><a name="[246]"></a>SaveSub_Maximum_Limit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, consum_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SaveSub_Maximum_Limit &rArr; AT24CXX_Write &rArr; IIC_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Sub_Maximum_Limit
</UL>

<P><STRONG><a name="[e1]"></a>InitSub_Maximum_Limit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, consum_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = InitSub_Maximum_Limit &rArr; AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystemParameter
</UL>

<P><STRONG><a name="[2ca]"></a>Consum_Time_Detection</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, consum_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrCMP
</UL>

<P><STRONG><a name="[2cb]"></a>app_srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, iap_updata.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;False_Random_number
</UL>

<P><STRONG><a name="[2cc]"></a>app_get_rand</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, iap_updata.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;False_Random_number
</UL>

<P><STRONG><a name="[258]"></a>False_Random_number</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, iap_updata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = False_Random_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_rand
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_srand
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_IAP_Start_Update
</UL>

<P><STRONG><a name="[2cd]"></a>write_flash</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, iap_updata.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_write_appbin
</UL>

<P><STRONG><a name="[259]"></a>Check_IAP_Start_Updata</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, iap_updata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Check_IAP_Start_Updata &rArr; MyStrCPY
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrCPY
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_IAP_Start_Update
</UL>

<P><STRONG><a name="[25b]"></a>Handle_IAP_Data</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, iap_updata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Handle_IAP_Data &rArr; iap_write_appbin &rArr; STMFLASH_Write &rArr; STMFLASH_Write_NoCheck &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrCPY
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_write_appbin
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Handle_IAP_Data
</UL>

<P><STRONG><a name="[25d]"></a>Check_IAP_END_Updata</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, iap_updata.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Check_IAP_END_Updata
</UL>

<P><STRONG><a name="[3ea]"></a>IAP_Read_Data</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, iap_updata.o(.text), UNUSED)

<P><STRONG><a name="[260]"></a>IAP_OK_System_Boot</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, iap_updata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = IAP_OK_System_Boot &rArr; iap_write_appbin &rArr; STMFLASH_Write &rArr; STMFLASH_Write_NoCheck &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_write_appbin
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_IAP_Updata_OK
</UL>

<P><STRONG><a name="[e6]"></a>Clear_IAP_OK_System_Boot</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, iap_updata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Clear_IAP_OK_System_Boot &rArr; iap_write_appbin &rArr; STMFLASH_Write &rArr; STMFLASH_Write_NoCheck &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Read
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_write_appbin
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[261]"></a>SoftReset</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, iap_updata.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_IAP_Updata_OK
</UL>

<P><STRONG><a name="[ec]"></a>Menu_key_set</STRONG> (Thumb, 628 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Menu_key_set &rArr; CheckKEY &rArr; ProcessKEYCMD &rArr; SYN6288_Send &rArr; SPEAKUART_SendString &rArr; MUSART1_SendData &rArr; TX_H
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrScreen
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYN6288_Send
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmKeyscan
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckKEY
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWorkStatus
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CheckKEY
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3]"></a>fun0</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fun0
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Key_Status
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWorkStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>fun1</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fun1
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWorkStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun50
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun45
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun40
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun35
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun30
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun25
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun20
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun15
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun10
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>fun2</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>fun3</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>fun4</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fun4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>fun5</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fun5
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyzeWorkStatus
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>fun6</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>fun7</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>fun8</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>fun9</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fun9 &rArr; AT24CXX_Write &rArr; IIC_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWorkStatus
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWorkStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>fun10</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fun10 &rArr; fun1
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWorkStatus
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWorkStatus
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>fun11</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>fun12</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fun12
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWorkStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>fun13</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fun13
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWorkStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>fun14</STRONG> (Thumb, 496 bytes, Stack size 88 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = fun14 &rArr; InitRemoteIPandPORT &rArr; AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_EC20_Remote_IP
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexToStr
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadnEC20DefaultValue
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWorkStatus
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWorkStatus
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRemoteIPandPORT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>fun15</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fun15 &rArr; fun1
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWorkStatus
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWorkStatus
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>fun16</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>fun17</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>fun18</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>fun19</STRONG> (Thumb, 282 bytes, Stack size 32 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = fun19 &rArr; SET_Volume &rArr; SYN6288_Send &rArr; SPEAKUART_SendString &rArr; MUSART1_SendData &rArr; TX_H
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNowTime
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_Volume
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_Synchronization_Time
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWorkStatus
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWorkStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>fun20</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fun20 &rArr; fun1
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWorkStatus
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWorkStatus
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>fun21</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>fun22</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>fun23</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>fun24</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fun24 &rArr; DelRecord &rArr; SaveRecordCount &rArr; AT24CXX_Write &rArr; IIC_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelRecord
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteConsumption_All_Money
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWorkStatus
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWorkStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>fun25</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fun25 &rArr; fun1
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWorkStatus
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWorkStatus
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>fun26</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>fun27</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fun27
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWorkStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>fun28</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fun28
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWorkStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>fun29</STRONG> (Thumb, 526 bytes, Stack size 32 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = fun29 &rArr; SaveMachine_Category &rArr; AT24CXX_Write &rArr; IIC_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveMachine_Category
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWorkStatus
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWorkStatus
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveCarte_consum_Money
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFixed_consumption_Timer
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFixed_consumption_Money
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>fun30</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fun30 &rArr; fun1
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWorkStatus
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWorkStatus
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[36]"></a>fun31</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[37]"></a>fun32</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[38]"></a>fun33</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[39]"></a>fun34</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fun34
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWorkStatus
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWorkStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[3a]"></a>fun35</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fun35 &rArr; fun1
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWorkStatus
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWorkStatus
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>fun36</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>fun37</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>fun38</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>fun39</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fun39
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWorkStatus
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWorkStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>fun40</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fun40 &rArr; fun1
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWorkStatus
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWorkStatus
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[27]"></a>fun41</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[28]"></a>fun42</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>fun43</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>fun44</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fun44
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWorkStatus
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWorkStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[2b]"></a>fun45</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fun45 &rArr; fun1
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWorkStatus
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWorkStatus
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[2c]"></a>fun46</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[2d]"></a>fun47</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[2e]"></a>fun48</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[2f]"></a>fun49</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fun49
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWorkStatus
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWorkStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[30]"></a>fun50</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fun50 &rArr; fun1
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWorkStatus
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWorkStatus
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[31]"></a>fun51</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[32]"></a>fun52</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[33]"></a>fun53</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[34]"></a>fun54</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[35]"></a>fun55</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[3b]"></a>fun56</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[3c]"></a>fun57</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[3d]"></a>fun58</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[3e]"></a>fun59</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[3f]"></a>fun60</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[40]"></a>fun81</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fun81
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWorkStatus
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[41]"></a>fun82</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[42]"></a>fun83</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[43]"></a>fun84</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = fun84 &rArr; SYN6288_Send &rArr; SPEAKUART_SendString &rArr; MUSART1_SendData &rArr; TX_H
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYN6288_Send
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrEQ
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[44]"></a>fun85</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fun85
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[45]"></a>fun86</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[46]"></a>fun87</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[47]"></a>fun88</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[48]"></a>fun89</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[49]"></a>fun90</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, menu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[3eb]"></a>exitbutton</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, menu.o(.text), UNUSED)

<P><STRONG><a name="[3ec]"></a>enterbutton</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, menu.o(.text), UNUSED)

<P><STRONG><a name="[2d2]"></a>outmenu</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, menu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timedelay_s
</UL>

<P><STRONG><a name="[2d4]"></a>Show_Menudata</STRONG> (Thumb, 478 bytes, Stack size 8 bytes, menufun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Show_Menudata
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_MenuMain
</UL>

<P><STRONG><a name="[2d5]"></a>W5500_GPIO_Configuration</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, w5500.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = W5500_GPIO_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Initialization
</UL>

<P><STRONG><a name="[2d6]"></a>W5500_NVIC_Configuration</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, w5500.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = W5500_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[6b]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, w5500.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI9_5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d7]"></a>SPI_Configuration</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, w5500.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Initialization
</UL>

<P><STRONG><a name="[2d8]"></a>SPI2_Send_Byte</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, w5500.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_SOCK_Data_Buffer
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SOCK_Data_Buffer
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500_SOCK_2Byte
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500_SOCK_1Byte
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500_1Byte
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_4Byte
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_2Byte
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_1Byte
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_nByte
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_2Byte
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_1Byte
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Send_Short
</UL>

<P><STRONG><a name="[2d9]"></a>SPI2_Send_Short</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, w5500.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_SOCK_Data_Buffer
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SOCK_Data_Buffer
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500_SOCK_2Byte
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500_SOCK_1Byte
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500_1Byte
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_4Byte
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_2Byte
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_1Byte
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_nByte
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_2Byte
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_1Byte
</UL>

<P><STRONG><a name="[2da]"></a>Write_W5500_1Byte</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, w5500.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Write_W5500_1Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Send_Short
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Interrupt_Process
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Init
</UL>

<P><STRONG><a name="[2db]"></a>Write_W5500_2Byte</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, w5500.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Write_W5500_2Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Send_Short
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Init
</UL>

<P><STRONG><a name="[2dc]"></a>Write_W5500_nByte</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, w5500.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Write_W5500_nByte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Send_Short
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Init
</UL>

<P><STRONG><a name="[2dd]"></a>Write_W5500_SOCK_1Byte</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, w5500.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Write_W5500_SOCK_1Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Send_Short
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_SOCK_Data_Buffer
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Interrupt_Process
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_UDP
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Listen
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Connect
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detect_Gateway
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Init
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SOCK_Data_Buffer
</UL>

<P><STRONG><a name="[2de]"></a>Write_W5500_SOCK_2Byte</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, w5500.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Write_W5500_SOCK_2Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Send_Short
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_SOCK_Data_Buffer
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Init
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SOCK_Data_Buffer
</UL>

<P><STRONG><a name="[2df]"></a>Write_W5500_SOCK_4Byte</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, w5500.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Write_W5500_SOCK_4Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Send_Short
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_SOCK_Data_Buffer
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Init
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detect_Gateway
</UL>

<P><STRONG><a name="[2e0]"></a>Read_W5500_1Byte</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, w5500.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Send_Short
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Interrupt_Process
</UL>

<P><STRONG><a name="[2e1]"></a>Read_W5500_SOCK_1Byte</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, w5500.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Read_W5500_SOCK_1Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Send_Short
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_SOCK_Data_Buffer
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Interrupt_Process
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_UDP
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Listen
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Connect
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detect_Gateway
</UL>

<P><STRONG><a name="[2e2]"></a>Read_W5500_SOCK_2Byte</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, w5500.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Read_W5500_SOCK_2Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Send_Short
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_SOCK_Data_Buffer
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SOCK_Data_Buffer
</UL>

<P><STRONG><a name="[2e3]"></a>Read_SOCK_Data_Buffer</STRONG> (Thumb, 316 bytes, Stack size 32 bytes, w5500.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500_SOCK_2Byte
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_2Byte
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_1Byte
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Send_Short
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Socket_PROT2_Receive
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Socket_PROT1_Receive
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Socket_PROT0_Receive
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Socket_Data
</UL>

<P><STRONG><a name="[169]"></a>Write_SOCK_Data_Buffer</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, w5500.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Write_SOCK_Data_Buffer &rArr; Read_W5500_SOCK_2Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500_SOCK_2Byte
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500_SOCK_1Byte
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_4Byte
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_2Byte
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_1Byte
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Send_Short
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec20sufatest
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReyurnCommand_Send
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessUDPClient
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Socket_PROT1_Send
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Socket_PROT0_Send
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Socket_Data
</UL>

<P><STRONG><a name="[2e4]"></a>W5500_Hardware_Reset</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, w5500.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = W5500_Hardware_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_SYSTEM_Init
</UL>

<P><STRONG><a name="[2e6]"></a>W5500_Init</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, w5500.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = W5500_Init &rArr; Write_W5500_nByte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_1Byte
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_nByte
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_2Byte
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_1Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Initialization
</UL>

<P><STRONG><a name="[2e7]"></a>Detect_Gateway</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, w5500.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Detect_Gateway &rArr; Read_W5500_SOCK_1Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500_SOCK_1Byte
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_4Byte
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_1Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Initialization
</UL>

<P><STRONG><a name="[2e8]"></a>Socket_Init</STRONG> (Thumb, 260 bytes, Stack size 8 bytes, w5500.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Socket_Init &rArr; Write_W5500_SOCK_4Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_4Byte
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_2Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Initialization
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Interrupt_Process
</UL>

<P><STRONG><a name="[2e9]"></a>Socket_Connect</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, w5500.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500_SOCK_1Byte
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_1Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Socket_Set
</UL>

<P><STRONG><a name="[2ea]"></a>Socket_Listen</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, w5500.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500_SOCK_1Byte
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_1Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Socket_Set
</UL>

<P><STRONG><a name="[2eb]"></a>Socket_UDP</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, w5500.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500_SOCK_1Byte
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_1Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Socket_Set
</UL>

<P><STRONG><a name="[2ec]"></a>W5500_Interrupt_Process</STRONG> (Thumb, 444 bytes, Stack size 16 bytes, w5500.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Init
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500_SOCK_1Byte
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500_1Byte
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_1Byte
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_1Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_System_Program
</UL>

<P><STRONG><a name="[2ed]"></a>W5500_Initialization</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, w5500_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = W5500_Initialization &rArr; Detect_Gateway &rArr; Read_W5500_SOCK_1Byte &rArr; SPI2_Send_Short &rArr; SPI2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Init
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detect_Gateway
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_SYSTEM_Init
</UL>

<P><STRONG><a name="[2ee]"></a>Load_Net_Parameters</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, w5500_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Load_Net_Parameters &rArr; InitLocalIPGateway &rArr; AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_MAC_Address
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLocalIPGateway
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRemoteIPandPORT
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_SYSTEM_Init
</UL>

<P><STRONG><a name="[2f1]"></a>W5500_Socket_Set</STRONG> (Thumb, 290 bytes, Stack size 8 bytes, w5500_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_UDP
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Listen
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Connect
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_System_Program
</UL>

<P><STRONG><a name="[2f2]"></a>Process_Socket_Data</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, w5500_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_SOCK_Data_Buffer
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SOCK_Data_Buffer
</UL>

<P><STRONG><a name="[2f3]"></a>Process_Socket_PROT0_Send</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, w5500_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_SOCK_Data_Buffer
</UL>

<P><STRONG><a name="[2f4]"></a>Process_Socket_PROT1_Send</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, w5500_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_SOCK_Data_Buffer
</UL>

<P><STRONG><a name="[2f5]"></a>Process_Socket_PROT0_Receive</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, w5500_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessTCPClient
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SOCK_Data_Buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_System_Program
</UL>

<P><STRONG><a name="[2f7]"></a>Process_Socket_PROT1_Receive</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, w5500_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessTCPServer
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SOCK_Data_Buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_System_Program
</UL>

<P><STRONG><a name="[2f9]"></a>Process_Socket_PROT2_Receive</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, w5500_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessUDPClient
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SOCK_Data_Buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_System_Program
</UL>

<P><STRONG><a name="[2fb]"></a>Timer2_Init_Config</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, w5500_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Timer2_Init_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Initialization
</UL>

<P><STRONG><a name="[2fc]"></a>NVIC_Configuration</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, w5500_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NVIC_Configuration &rArr; W5500_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_NVIC_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Initialization
</UL>

<P><STRONG><a name="[2fd]"></a>System_Initialization</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, w5500_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = System_Initialization &rArr; SPI_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Init_Config
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Configuration
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_GPIO_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_SYSTEM_Init
</UL>

<P><STRONG><a name="[b9]"></a>W5500_SYSTEM_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, w5500_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = W5500_SYSTEM_Init &rArr; Load_Net_Parameters &rArr; InitLocalIPGateway &rArr; AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Initialization
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Net_Parameters
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Initialization
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Hardware_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystemHardware
</UL>

<P><STRONG><a name="[2fe]"></a>W5500_System_Program</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, w5500_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Socket_PROT2_Receive
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Socket_PROT1_Receive
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Socket_PROT0_Receive
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Socket_Set
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Interrupt_Process
</UL>

<P><STRONG><a name="[70]"></a>TIM2_IRQHandler</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, w5500_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM2_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e5]"></a>Delay</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, w5500_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_UDP
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Listen
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Connect
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detect_Gateway
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Init
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Hardware_Reset
</UL>

<P><STRONG><a name="[c8]"></a>InitTcpClient</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rj45cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = InitTcpClient
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystemParameter
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessTCPClient
</UL>

<P><STRONG><a name="[2ff]"></a>CheckTCPClientData</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, rj45cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;separate_value_2_1
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetXOR
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrEQ
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessTCPClient
</UL>

<P><STRONG><a name="[2f6]"></a>ProcessTCPClient</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rj45cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTcpClient
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTCPClientData
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Socket_PROT0_Receive
</UL>

<P><STRONG><a name="[300]"></a>InitTcpServer</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rj45cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessTCPServer
</UL>

<P><STRONG><a name="[301]"></a>CheckTCPServerData</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, rj45cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;separate_value_2_1
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetXOR
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrEQ
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessTCPServer
</UL>

<P><STRONG><a name="[2f8]"></a>ProcessTCPServer</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rj45cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTCPServerData
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTcpServer
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Socket_PROT1_Receive
</UL>

<P><STRONG><a name="[2fa]"></a>ProcessUDPClient</STRONG> (Thumb, 136 bytes, Stack size 72 bytes, rj45cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrCPY
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_SOCK_Data_Buffer
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrEQ
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Socket_PROT2_Receive
</UL>

<P><STRONG><a name="[1f8]"></a>reboot</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, rj45cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = reboot
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadnNetDefaultValue
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_TCP_Remote_IP
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_TCP_Local_IP
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_This_MAC
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_TCP_Mode
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_ResNottore_factory
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Restore_factory
</UL>

<P><STRONG><a name="[2ef]"></a>InitLocalIPGateway</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, rj45cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = InitLocalIPGateway &rArr; AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrCPY
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Net_Parameters
</UL>

<P><STRONG><a name="[2d1]"></a>InitRemoteIPandPORT</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, rj45cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = InitRemoteIPandPORT &rArr; AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrCPY
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Net_Parameters
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun14
</UL>

<P><STRONG><a name="[2f0]"></a>Init_MAC_Address</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, rj45cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Init_MAC_Address &rArr; AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyStrCPY
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Net_Parameters
</UL>

<P><STRONG><a name="[c0]"></a>TimeDelay</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lcd_dis.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystemHardware
</UL>

<P><STRONG><a name="[3ed]"></a>Delay_40US</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lcd_dis.o(.text), UNUSED)

<P><STRONG><a name="[303]"></a>delay2</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lcd_dis.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Send
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SSSet
</UL>

<P><STRONG><a name="[3ee]"></a>GetKey</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lcd_dis.o(.text), UNUSED)

<P><STRONG><a name="[3ef]"></a>LedON</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_dis.o(.text), UNUSED)

<P><STRONG><a name="[be]"></a>LCD_Config</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lcd_dis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystemHardware
</UL>

<P><STRONG><a name="[bf]"></a>LCD_Init</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, lcd_dis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LCD_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystemHardware
</UL>

<P><STRONG><a name="[302]"></a>SPI_SSSet</STRONG> (Thumb, 102 bytes, Stack size 4 bytes, lcd_dis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SPI_SSSet
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay2
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBG_Color
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawIcon
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrScreen
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFontType
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFG_Color
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDisplayInvert
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutString
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawQRCODE
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTranIcon
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawRect
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawLine
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawPoint
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWindows
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDisplayOnOff
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutBitmap
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutString_cn
</UL>

<P><STRONG><a name="[304]"></a>SPI_Send</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, lcd_dis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay2
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBG_Color
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawIcon
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrScreen
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFontType
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFG_Color
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDisplayInvert
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutString
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawQRCODE
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTranIcon
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawRect
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawLine
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawPoint
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWindows
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDisplayOnOff
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutBitmap
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutString_cn
</UL>

<P><STRONG><a name="[20b]"></a>PutString</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, lcd_dis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PutString &rArr; SPI_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Send
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SSSet
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowPlay_Card
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Query_Balance_Return
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Open_Door
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowKeyValue_Plus
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Standby
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Show_Consump_Pattern
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowKeyValue
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_Query_Money
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_MenuPassword
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_MenuMain
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_Function
</UL>

<P><STRONG><a name="[305]"></a>PutString_cn</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, lcd_dis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PutString_cn &rArr; SPI_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Send
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SSSet
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowKeyValue_Plus
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Show_Consump_Pattern
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowKeyValue
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_Function
</UL>

<P><STRONG><a name="[c2]"></a>ClrScreen</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, lcd_dis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ClrScreen &rArr; SPI_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Send
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SSSet
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_key_set
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystemHardware
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowPlay_Card
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Query_Balance_Return
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Open_Door
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowKeyValue_Plus
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Standby
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Show_Consump_Pattern
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowKeyValue
</UL>

<P><STRONG><a name="[c1]"></a>SetBG_Color</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lcd_dis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetBG_Color &rArr; SPI_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Send
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SSSet
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystemHardware
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowPlay_Card
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Query_Balance_Return
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Open_Door
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowKeyValue_Plus
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Standby
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Show_Consump_Pattern
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowKeyValue
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_MenuPassword
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_MenuMain
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_Function
</UL>

<P><STRONG><a name="[20a]"></a>SetFG_Color</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lcd_dis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetFG_Color &rArr; SPI_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Send
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SSSet
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowPlay_Card
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Query_Balance_Return
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Open_Door
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowKeyValue_Plus
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Standby
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Show_Consump_Pattern
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowKeyValue
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_MenuPassword
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_MenuMain
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_Function
</UL>

<P><STRONG><a name="[306]"></a>PutBitmap</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lcd_dis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Send
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SSSet
</UL>

<P><STRONG><a name="[307]"></a>SetDisplayOnOff</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lcd_dis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Send
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SSSet
</UL>

<P><STRONG><a name="[208]"></a>SetDisplayInvert</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lcd_dis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetDisplayInvert &rArr; SPI_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Send
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SSSet
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowPlay_Card
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Query_Balance_Return
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Open_Door
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowKeyValue_Plus
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Standby
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Show_Consump_Pattern
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowKeyValue
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_MenuPassword
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_MenuMain
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_Function
</UL>

<P><STRONG><a name="[308]"></a>SetWindows</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, lcd_dis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Send
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SSSet
</UL>

<P><STRONG><a name="[209]"></a>SetFontType</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lcd_dis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetFontType &rArr; SPI_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Send
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SSSet
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowPlay_Card
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Query_Balance_Return
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Open_Door
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowKeyValue_Plus
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Standby
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Show_Consump_Pattern
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowKeyValue
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_MenuPassword
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_MenuMain
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_Function
</UL>

<P><STRONG><a name="[309]"></a>DrawPoint</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, lcd_dis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Send
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SSSet
</UL>

<P><STRONG><a name="[30a]"></a>DrawLine</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, lcd_dis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DrawLine &rArr; SPI_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Send
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SSSet
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_Function
</UL>

<P><STRONG><a name="[30b]"></a>DrawRect</STRONG> (Thumb, 128 bytes, Stack size 28 bytes, lcd_dis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DrawRect &rArr; SPI_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Send
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SSSet
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Standby
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_MenuPassword
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_MenuMain
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_Function
</UL>

<P><STRONG><a name="[c4]"></a>DrawIcon</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lcd_dis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DrawIcon &rArr; SPI_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Send
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SSSet
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystemHardware
</UL>

<P><STRONG><a name="[30c]"></a>DrawTranIcon</STRONG> (Thumb, 90 bytes, Stack size 20 bytes, lcd_dis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Send
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SSSet
</UL>

<P><STRONG><a name="[30d]"></a>DrawQRCODE</STRONG> (Thumb, 90 bytes, Stack size 20 bytes, lcd_dis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Send
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SSSet
</UL>

<P><STRONG><a name="[1c9]"></a>LCD_Standby</STRONG> (Thumb, 530 bytes, Stack size 88 bytes, lcd_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = LCD_Standby &rArr; DrawRect &rArr; SPI_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBG_Color
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrScreen
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1302_Read_Time
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDectoBCD
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexToStr
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFontType
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFG_Color
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDisplayInvert
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutString
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawRect
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyzeWorkStatus
</UL>

<P><STRONG><a name="[2b5]"></a>LCD_ShowPlay_Card</STRONG> (Thumb, 956 bytes, Stack size 40 bytes, lcd_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LCD_ShowPlay_Card &rArr; PutString &rArr; SPI_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBG_Color
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrScreen
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFontType
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFG_Color
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDisplayInvert
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutString
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Standby_Display_Time
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeginOutput1
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessReal_time_upload
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newCheck_Card_Limit
</UL>

<P><STRONG><a name="[1ca]"></a>ShowKeyValue_Plus</STRONG> (Thumb, 384 bytes, Stack size 120 bytes, lcd_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ShowKeyValue_Plus &rArr; PutString &rArr; SPI_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBG_Color
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrScreen
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFontType
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFG_Color
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDisplayInvert
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutString
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Standby_Display
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutString_cn
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyzeWorkStatus
</UL>

<P><STRONG><a name="[1cb]"></a>LCD_ShowKeyValue</STRONG> (Thumb, 166 bytes, Stack size 96 bytes, lcd_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LCD_ShowKeyValue &rArr; PutString &rArr; SPI_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBG_Color
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrScreen
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFontType
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFG_Color
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDisplayInvert
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutString
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Standby_Display
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutString_cn
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyzeWorkStatus
</UL>

<P><STRONG><a name="[1cc]"></a>LCD_Show_Consump_Pattern</STRONG> (Thumb, 600 bytes, Stack size 24 bytes, lcd_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LCD_Show_Consump_Pattern &rArr; PutString &rArr; SPI_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBG_Color
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrScreen
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexToStr
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFontType
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFG_Color
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDisplayInvert
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutString
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Standby_Display
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutString_cn
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyzeWorkStatus
</UL>

<P><STRONG><a name="[1ce]"></a>LCD_Disp_MenuPassword</STRONG> (Thumb, 218 bytes, Stack size 176 bytes, lcd_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = LCD_Disp_MenuPassword &rArr; DrawRect &rArr; SPI_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBG_Color
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexToStr
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFontType
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFG_Color
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDisplayInvert
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutString
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawRect
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyzeWorkStatus
</UL>

<P><STRONG><a name="[1cd]"></a>LCD_Disp_MenuMain</STRONG> (Thumb, 266 bytes, Stack size 16 bytes, lcd_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LCD_Disp_MenuMain &rArr; DrawRect &rArr; SPI_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBG_Color
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFontType
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFG_Color
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDisplayInvert
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutString
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawRect
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Menudata
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyzeWorkStatus
</UL>

<P><STRONG><a name="[1cf]"></a>LCD_Disp_Function</STRONG> (Thumb, 6630 bytes, Stack size 512 bytes, lcd_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = LCD_Disp_Function &rArr; DrawRect &rArr; SPI_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBG_Color
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDectoBCD
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexToStr
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFontType
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFG_Color
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDisplayInvert
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutString
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawRect
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawLine
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutString_cn
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyzeWorkStatus
</UL>

<P><STRONG><a name="[1d0]"></a>LCD_Disp_Query_Money</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lcd_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_Disp_Query_Money &rArr; PutString &rArr; SPI_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutString
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyzeWorkStatus
</UL>

<P><STRONG><a name="[30e]"></a>CalculateCRC_1</STRONG> (Thumb, 86 bytes, Stack size 536 bytes, crc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[2cf]"></a>CalculateCRC</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, crc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CalculateCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IAP_Data
</UL>

<P><STRONG><a name="[2ce]"></a>iap_write_appbin</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, iap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = iap_write_appbin &rArr; STMFLASH_Write &rArr; STMFLASH_Write_NoCheck &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_IAP_OK_System_Boot
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_OK_System_Boot
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IAP_Data
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash
</UL>

<P><STRONG><a name="[30f]"></a>iap_load_app</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, iap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_MSP
</UL>

<P><STRONG><a name="[3f0]"></a>__use_no_semihosting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi_2.o(.text), UNUSED)

<P><STRONG><a name="[1e0]"></a>toupper</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, toupper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = toupper &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrTodec
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToHex
</UL>

<P><STRONG><a name="[298]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process4G_Commu
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessQR_Commu
</UL>

<P><STRONG><a name="[15c]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRS485
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process4G_Commu
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYN6288_Send
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_QGPSLOC
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_CIMI
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_CGSN
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessQR_Commu
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_IMEI_IMSI_Machno
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessTCPServer
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessTCPClient
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Socket_PROT2_Receive
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Socket_PROT1_Receive
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Socket_PROT0_Receive
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Socket_Data
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Menudata
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun29
</UL>

<P><STRONG><a name="[312]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[3f1]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[218]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heartbeat_Send
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Power_Signal
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wisdom_plate_Return
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD12864_ShowKeyValue
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD12864_Standby
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UPloadRecord
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadnEC20DefaultValue
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_Synchronization_Time
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowKeyValue_Plus
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Standby
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowKeyValue
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_MenuPassword
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_Function
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateCRC_1
</UL>

<P><STRONG><a name="[3f2]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[3f3]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[3f4]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[152]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_key_set
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTcpClient
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitEC20Combuff
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCombuff
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowPlay_Card
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessQR_Commu
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_com_data
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTcpServer
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun84
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun81
</UL>

<P><STRONG><a name="[313]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[3f5]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[15a]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYN6288_Send
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_CIMI
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_CGSN
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD12864_ShowKeyValue
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRecord
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_IMEI_IMSI_Machno
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMaxRecordCount
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWhiteGroupName
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBackWhiteNamesize
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_TCP4G_Remote_IP
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_TCP_Local_IP
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowKeyValue_Plus
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Show_Consump_Pattern
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowKeyValue
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_MenuPassword
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_Function
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessUDPClient
</UL>

<P><STRONG><a name="[3f6]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[3f7]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[314]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[3f8]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[3f9]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[3fa]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[3fb]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[3fc]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[311]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
</UL>

<P><STRONG><a name="[98]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[3fd]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[315]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[3fe]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[9b]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[a0]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[318]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[92]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[f4]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[f3]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[139]"></a>CheckWG1Data</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, wg1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessWG1
</UL>

<P><STRONG><a name="[13d]"></a>CheckWG2Data</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, wg2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessWG2
</UL>

<P><STRONG><a name="[153]"></a>QuectelEC20_SendCmd</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ec20.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = QuectelEC20_SendCmd &rArr; EC20_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EC20_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_QICLOSE
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_QIOPEN
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_QGPSEND
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_QGPSLOC
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_QGPSCFG
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_QGPS
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_CGREG
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_CREG
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_CIMI
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_CGSN
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_CPIN
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_ATE0
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_AT
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_PowerDown
</UL>

<P><STRONG><a name="[155]"></a>GetAckData</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, ec20.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetAckData
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_QICLOSE
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_QIOPEN
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_QGPSEND
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_QGPSLOC
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_QGPSCFG
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_QGPS
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_CPIN
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_ATE0
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_AT
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_PowerDown
</UL>

<P><STRONG><a name="[15f]"></a>ExpectReceData</STRONG> (Thumb, 346 bytes, Stack size 32 bytes, ec20.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ExpectReceData
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_CGREG
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelEC20_CREG
</UL>

<P><STRONG><a name="[191]"></a>TI4_Config</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[18f]"></a>TI3_Config</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[18d]"></a>TI2_Config</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[18b]"></a>TI1_Config</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[1a8]"></a>RC522_SPI_Config</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, rc522_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RC522_SPI_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_Init
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
